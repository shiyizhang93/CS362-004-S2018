Test suite for card adventurer effect
Test result for player 1
FAIL: Player hand number - expected value is 6, but the actual value is 7
FAIL: Player played card number - expected value is 1, but the actual value is 0
PASS: The other player deck number
PASS: Coin number
FAIL: Player discard number - expected value is 6, but the actual value is 7
PASS: The number of supply matches
Test result for player 2
FAIL: Player hand number - expected value is 6, but the actual value is 7
FAIL: Player played card number - expected value is 1, but the actual value is 0
PASS: The other player deck number
PASS: Coin number
FAIL: Player discard number - expected value is 6, but the actual value is 8
PASS: The number of supply matches
File 'cardtest1.c'
Lines executed:94.12% of 51
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:27.05% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://cardtest1.c
        -:    2://Created by Shiyi Zhang for Assignment 3
        -:    3://It is to test the adventurer card effect
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <stdio.h>
        -:    8:#include "rngs.h"
        -:    9:
       10:   10:void showTestResult(int expectedVal, int testVal, char *temp) {
       10:   11:    char *testName = temp;
       10:   12:    if (expectedVal == testVal) {
        4:   13:	    printf("PASS: %s", testName);
        -:   14:    } 
        -:   15:    else {
        6:   16:	    printf("FAIL: %s - expected value is %d, but the actual value is %d", testName, expectedVal, testVal);
        -:   17:    }
       10:   18:    printf("\n");
       10:   19:}
        -:   20:
        1:   21:int main (int argc, char** argv) {
        -:   22:    struct gameState startState; 
        -:   23:    struct gameState endState;
        1:   24:    int numPlayers = 2;
        1:   25:    int handFlag = 0;
        1:   26:    int choice1 = -1;
        1:   27:    int choice2 = -1;
        1:   28:    int choice3 = -1;
        1:   29:    int bonus = 0;
        1:   30:    int seed = 10;
        1:   31:    int k[10] = {adventurer, council_room, gardens, mine, remodel, smithy, baron, great_hall, steward, village};
        -:   32:    int i;
        -:   33:    int expectedVal;
        -:   34:    int testVal;
        1:   35:    int tempFlag = 0;
        1:   36:    int numNewCardHand = 2;
        1:   37:    int numCardPlay = 1;
        -:   38:    int playerNum;
        -:   39:
        1:   40:    initializeGame(numPlayers, k, seed, &startState);
        1:   41:    endState = startState;
        1:   42:    printf("Test suite for card adventurer effect\n");
        3:   43:    for (playerNum = 0; playerNum < numPlayers; playerNum++) {
        2:   44:	    cardEffect(adventurer, choice1, choice2, choice3, &endState, handFlag, &bonus);
        2:   45:      printf("Test result for player %d\n", playerNum+1);
        2:   46:    	expectedVal = startState.handCount[playerNum] + numNewCardHand - numCardPlay;
        2:   47:    	testVal = endState.handCount[playerNum];
        2:   48:    	showTestResult(expectedVal, testVal, "Player hand number");
        -:   49:    
        2:   50:    	expectedVal = startState.playedCardCount + numCardPlay;
        2:   51:    	testVal = endState.playedCardCount;
        2:   52:    	showTestResult(expectedVal, testVal, "Player played card number");
        -:   53:    
        2:   54:    	expectedVal = playerNum == 1 ? 
        2:   55:    	    startState.deckCount[1-playerNum] - numNewCardHand : startState.deckCount[1-playerNum];
        2:   56:    	testVal = endState.deckCount[1-playerNum];
        2:   57:    	showTestResult(expectedVal, testVal, "The other player deck number");
        -:   58:    
        2:   59:    	expectedVal = startState.coins;
        2:   60:    	testVal = endState.coins;
        2:   61:    	showTestResult(expectedVal, testVal, "Coin number");
        -:   62:
        2:   63:    	expectedVal = numNewCardHand + startState.handCount[playerNum] - numCardPlay;
        2:   64:    	endTurn(&endState);
        2:   65:    	endTurn(&startState);
        2:   66:    	testVal = endState.discardCount[playerNum];
        2:   67:    	showTestResult(expectedVal, testVal, "Player discard number");
        -:   68:
       56:   69:    	for (i = 0; i < treasure_map + 1; i++) {
       54:   70:    	    if (startState.supplyCount[i] != endState.supplyCount[i]) {
    #####:   71:    		    tempFlag = 1;
    #####:   72:    		  break;
        -:   73:    	    }
        -:   74:    	}
        2:   75:    	if (!tempFlag) {
        2:   76:    	    printf("PASS: The number of supply matches\n");
        -:   77:    	} 
        -:   78:      else {
    #####:   79:    	    printf("FAIL: The number of supply does not match %d\n", i);
        -:   80:    	}
        -:   81:    }
        1:   82:    return 0;
        -:   83:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
       40:   15:int compare(const void* a, const void* b) {
       40:   16:  if (*(int*)a > *(int*)b)
        1:   17:    return 1;
       39:   18:  if (*(int*)a < *(int*)b)
       10:   19:    return -1;
       29:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        1:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        1:   51:  SelectStream(1);
        1:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        1:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        1:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       11:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
      110:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      100:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        1:   80:  if (numPlayers == 2)
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        1:   94:  if (numPlayers == 2)
        -:   95:    {
        1:   96:      state->supplyCount[estate] = 8;
        1:   97:      state->supplyCount[duchy] = 8;
        1:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        1:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  109:  state->supplyCount[silver] = 40;
        1:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
       21:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
      165:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
      155:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       10:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
        4:  122:		  if (numPlayers == 2){ 
        2:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
        8:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       10:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      145:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
        3:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
        2:  147:      state->deckCount[i] = 0;
        8:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
        6:  150:	  state->deck[i][j] = estate;
        6:  151:	  state->deckCount[i]++;
        -:  152:	}
       16:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
       14:  155:	  state->deck[i][j] = copper;
       14:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
        3:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
        2:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
        3:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
        2:  173:      state->handCount[i] = 0;
        2:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
       28:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
       27:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        1:  189:  state->outpostPlayed = 0;
        1:  190:  state->phase = 0;
        1:  191:  state->numActions = 1;
        1:  192:  state->numBuys = 1;
        1:  193:  state->playedCardCount = 0;
        1:  194:  state->whoseTurn = 0;
        1:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
        6:  199:  for (it = 0; it < 5; it++){
        5:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        -:  206:}
        -:  207:
        3:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        3:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        3:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        3:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       33:  221:  while (state->deckCount[player] > 0) {
       27:  222:    card = floor(Random() * state->deckCount[player]);
       27:  223:    newDeck[newDeckPos] = state->deck[player][card];
       27:  224:    newDeckPos++;
       71:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
       44:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
       27:  228:    state->deckCount[player]--;
        -:  229:  }
       30:  230:  for (i = 0; i < newDeckPos; i++) {
       27:  231:    state->deck[player][i] = newDeck[i];
       27:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
        3:  235:  return 0;
        -:  236:}
        -:  237:
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
        6:  353:int whoseTurn(struct gameState *state) {
        6:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
        4:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
        4:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
       28:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       24:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       24:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
        4:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
        4:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
        2:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
        2:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
        4:  377:  state->outpostPlayed = 0;
        4:  378:  state->phase = 0;
        4:  379:  state->numActions = 1;
        4:  380:  state->coins = 0;
        4:  381:  state->numBuys = 1;
        4:  382:  state->playedCardCount = 0;
        4:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       24:  387:  for (k = 0; k < 5; k++){
       20:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
        4:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
        4:  394:  return 0;
        -:  395:}
        -:  396:
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
       30:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
       30:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
        8:  540:    for (i = 0; i < state->discardCount[player];i++){
        7:  541:      state->deck[player][i] = state->discard[player][i];
        7:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
        1:  545:    state->deckCount[player] = state->discardCount[player];
        1:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        1:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        1:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        1:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        1:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        1:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
        1:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  570:    state->deckCount[player]--;
        1:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
       29:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
       29:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
       29:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       29:  583:    state->deckCount[player]--;
       29:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
       30:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
        2:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
        2:  660:  int currentPlayer = whoseTurn(state);
        2:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
        2:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
        2:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
        2:  667:  int z = 0;// this is the counter for the temp hand
        2:  668:  if (nextPlayer > (state->numPlayers - 1)){
        1:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
        2:  674:  switch( card ) 
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
        2:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
        2:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
        -:  685:	{
    #####:  686:	  drawCard(currentPlayer, state);
        -:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
        -:  694:	{
    #####:  695:	  if ( i != currentPlayer )
        -:  696:	    {
    #####:  697:	      drawCard(i, state);
        -:  698:	    }
        -:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
    #####:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
    #####:  719:	if (supplyCount(choice1, state) <= 0){
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
        -:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
        -:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
        -:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
        -:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
        -:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
    #####:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
    #####:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
    #####:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
    #####:  835:      discardCard(handPos, currentPlayer, state, 0);
    #####:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
    #####:  864:		isGameOver(state);
        -:  865:	      }
        -:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
        -:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
    #####:  881:	    isGameOver(state);
        -:  882:	  }
        -:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
        -:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
        -:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
        -:  941:			{
    #####:  942:			  drawCard(i, state);
        -:  943:			}
        -:  944:		    }
        -:  945:		}
        -:  946:	    }
        -:  947:				
        -:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
        -:  957:	}
    #####:  958:      else if (choice1 == 2)
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
        -:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
        -:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
        -:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
        -:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
        -: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1019:	  state->coins += 2;
        -: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
        -: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1049:	    {
    #####: 1050:	      j++;
        -: 1051:	    }
        -: 1052:	}
    #####: 1053:      if (j < choice2)
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1070:	    }
        -: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
        -: 1086:	    }
        -: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
        -: 1137:	}
    #####: 1138:      if (index > -1)
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
        -: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
        -: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
        2: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
        2: 1167:	int drawntreasure = 0;
        2: 1168:	int z =0; 
        -: 1169:	  
        9: 1170:	while(drawntreasure<2){
        5: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1172:			shuffle(currentPlayer, state);
        -: 1173:		}
        -: 1174:	
        5: 1175:		drawCard(currentPlayer, state);
        5: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        5: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        4: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
        1: 1181:			temphand[z]=cardDrawn;
        1: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
        5: 1187:	while(z-1>=0){
        1: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
        1: 1189:		z=z-1;
        -: 1190:    }
        2: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
    #####: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
    #####: 1198:    for (i = 0; i <= 3; i++){
    #####: 1199:	  drawCard(currentPlayer, state);
        -: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
    #####: 1203:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
    #####: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
        -: 1229:}
        -: 1230:
    #####: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
        -: 1256:		}
        -: 1257:					
        -: 1258:	    }
        -: 1259:				
        -: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
    #####: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
    #####: 1271:		if (i != currentPlayer){
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1277:		}
        -: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
    #####: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
    #####: 1291:  if (trashFlag < 1)
        -: 1292:    {
        -: 1293:      //add card to played pile
    #####: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1295:      state->playedCardCount++;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
    #####: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
    #####: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
    #####: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
    #####: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
    #####: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
    #####: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
    #####: 1322:  return 0;
        -: 1323:}
        -: 1324:
    #####: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1330:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1331:    {
    #####: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
    #####: 1340:  if (toFlag == 1)
        -: 1341:    {
    #####: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:      state->deckCount[player]++;
        -: 1344:    }
    #####: 1345:  else if (toFlag == 2)
        -: 1346:    {
    #####: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:      state->handCount[player]++;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
    #####: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
    #####: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
    #####: 1359:  return 0;
        -: 1360:}
        -: 1361:
        5: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
        5: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
       30: 1370:  for (i = 0; i < state->handCount[player]; i++)
        -: 1371:    {
       25: 1372:      if (state->hand[player][i] == copper)
        -: 1373:	{
       16: 1374:	  state->coins += 1;
        -: 1375:	}
        9: 1376:      else if (state->hand[player][i] == silver)
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
        -: 1379:	}
        9: 1380:      else if (state->hand[player][i] == gold)
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
        -: 1383:	}	
        -: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
        5: 1387:  state->coins += bonus;
        -: 1388:
        5: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
        -: 1394:
Test suite for card smithy effect
Test result for player 1
FAIL: Player hand number - expected value is 7, but the actual value is 8
FAIL: Player deck number - expected value is 2, but the actual value is 1
PASS: Player played card number
PASS: The other player deck number
PASS: Coin number
FAIL: Player discard number - expected value is 7, but the actual value is 8
PASS: The number of supply matches
Test result for player 2
FAIL: Player hand number - expected value is 7, but the actual value is 8
FAIL: Player deck number - expected value is 2, but the actual value is 1
PASS: Player played card number
FAIL: The other player deck number - expected value is 2, but the actual value is 1
PASS: Coin number
FAIL: Player discard number - expected value is 7, but the actual value is 8
PASS: The number of supply matches
File 'cardtest2.c'
Lines executed:94.44% of 54
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:30.07% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://cardtest2.c
        -:    2://Created by Shiyi Zhang for Assignment 3
        -:    3://It is to test the smithy card effect
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <stdio.h>
        -:    8:#include "rngs.h"
        -:    9:
       12:   10:void showTestResult(int expectedVal, int testVal, char *temp) {
       12:   11:    char *testName = temp;
       12:   12:    if (expectedVal == testVal) {
        5:   13:	    printf("PASS: %s", testName);
        -:   14:    } 
        -:   15:    else {
        7:   16:	    printf("FAIL: %s - expected value is %d, but the actual value is %d", testName, expectedVal, testVal);
        -:   17:    }
       12:   18:    printf("\n");
       12:   19:}
        -:   20:
        1:   21:int main (int argc, char** argv) {
        -:   22:    struct gameState startState; 
        -:   23:    struct gameState endState;
        1:   24:    int numPlayers = 2;
        1:   25:    int handFlag = 0;
        1:   26:    int choice1 = -1;
        1:   27:    int choice2 = -1;
        1:   28:    int choice3 = -1;
        1:   29:    int bonus = 0;
        1:   30:    int seed = 10;
        1:   31:    int k[10] = {adventurer, council_room, gardens, mine, remodel, smithy, baron, great_hall, steward, village};
        -:   32:    int i;
        -:   33:    int expectedVal;
        -:   34:    int testVal;
        1:   35:    int tempFlag = 0;
        1:   36:    int numNewCardHand = 3;
        1:   37:    int numCardPlay = 1;
        -:   38:    int playerNum;
        -:   39:
        1:   40:    initializeGame(numPlayers, k, seed, &startState);
        1:   41:    endState = startState;
        1:   42:    printf("Test suite for card smithy effect\n");
        3:   43:    for (playerNum = 0; playerNum < numPlayers; playerNum++) {
        2:   44:	    cardEffect(smithy, choice1, choice2, choice3, &endState, handFlag, &bonus);
        2:   45:      printf("Test result for player %d\n", playerNum+1);
        2:   46:    	expectedVal = startState.handCount[playerNum] + numNewCardHand - numCardPlay;
        2:   47:    	testVal = endState.handCount[playerNum];
        2:   48:    	showTestResult(expectedVal, testVal, "Player hand number");
        -:   49:     
        2:   50:      expectedVal = startState.deckCount[playerNum] - numNewCardHand;
        2:   51:	    testVal = endState.deckCount[playerNum];
        2:   52:	    showTestResult(expectedVal, testVal, "Player deck number"); 
        -:   53:    
        2:   54:    	expectedVal = startState.playedCardCount + numCardPlay;
        2:   55:    	testVal = endState.playedCardCount;
        2:   56:    	showTestResult(expectedVal, testVal, "Player played card number");
        -:   57:    
        2:   58:    	expectedVal = playerNum == 1 ? 
        2:   59:    	    startState.deckCount[1-playerNum] - numNewCardHand : startState.deckCount[1-playerNum];
        2:   60:    	testVal = endState.deckCount[1-playerNum];
        2:   61:    	showTestResult(expectedVal, testVal, "The other player deck number");
        -:   62:    
        2:   63:    	expectedVal = startState.coins;
        2:   64:    	testVal = endState.coins;
        2:   65:    	showTestResult(expectedVal, testVal, "Coin number");
        -:   66:
        2:   67:    	expectedVal = numNewCardHand + startState.handCount[playerNum] - numCardPlay;
        2:   68:    	endTurn(&endState);
        2:   69:    	endTurn(&startState);
        2:   70:    	testVal = endState.discardCount[playerNum];
        2:   71:    	showTestResult(expectedVal, testVal, "Player discard number");
        -:   72:
       56:   73:    	for (i = 0; i < treasure_map + 1; i++) {
       54:   74:    	    if (startState.supplyCount[i] != endState.supplyCount[i]) {
    #####:   75:    		    tempFlag = 1;
    #####:   76:    		  break;
        -:   77:    	    }
        -:   78:    	}
        2:   79:    	if (!tempFlag) {
        2:   80:    	    printf("PASS: The number of supply matches\n");
        -:   81:    	} 
        -:   82:      else {
    #####:   83:    	    printf("FAIL: The number of supply does not match %d\n", i);
        -:   84:    	}
        -:   85:    }
        1:   86:    return 0;
        -:   87:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
       85:   15:int compare(const void* a, const void* b) {
       85:   16:  if (*(int*)a > *(int*)b)
        6:   17:    return 1;
       79:   18:  if (*(int*)a < *(int*)b)
       18:   19:    return -1;
       61:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        2:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        2:   51:  SelectStream(1);
        2:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        2:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        2:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       22:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
      220:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      200:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        2:   80:  if (numPlayers == 2)
        -:   81:    {
        2:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        2:   94:  if (numPlayers == 2)
        -:   95:    {
        2:   96:      state->supplyCount[estate] = 8;
        2:   97:      state->supplyCount[duchy] = 8;
        2:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        2:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  109:  state->supplyCount[silver] = 40;
        2:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
       42:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
      330:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
      310:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       20:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
        8:  122:		  if (numPlayers == 2){ 
        4:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
       16:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       20:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      290:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
        6:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
        4:  147:      state->deckCount[i] = 0;
       16:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
       12:  150:	  state->deck[i][j] = estate;
       12:  151:	  state->deckCount[i]++;
        -:  152:	}
       32:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
       28:  155:	  state->deck[i][j] = copper;
       28:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
        6:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
        4:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
        6:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
        4:  173:      state->handCount[i] = 0;
        4:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
       56:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
       54:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        2:  189:  state->outpostPlayed = 0;
        2:  190:  state->phase = 0;
        2:  191:  state->numActions = 1;
        2:  192:  state->numBuys = 1;
        2:  193:  state->playedCardCount = 0;
        2:  194:  state->whoseTurn = 0;
        2:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       12:  199:  for (it = 0; it < 5; it++){
       10:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        2:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        2:  205:  return 0;
        -:  206:}
        -:  207:
        6:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        6:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        6:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        6:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       67:  221:  while (state->deckCount[player] > 0) {
       55:  222:    card = floor(Random() * state->deckCount[player]);
       55:  223:    newDeck[newDeckPos] = state->deck[player][card];
       55:  224:    newDeckPos++;
      147:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
       92:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
       55:  228:    state->deckCount[player]--;
        -:  229:  }
       61:  230:  for (i = 0; i < newDeckPos; i++) {
       55:  231:    state->deck[player][i] = newDeck[i];
       55:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
        6:  235:  return 0;
        -:  236:}
        -:  237:
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
       12:  353:int whoseTurn(struct gameState *state) {
       12:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
        8:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
        8:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
       58:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       50:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       50:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
        8:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
        8:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
        4:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
        4:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
        8:  377:  state->outpostPlayed = 0;
        8:  378:  state->phase = 0;
        8:  379:  state->numActions = 1;
        8:  380:  state->coins = 0;
        8:  381:  state->numBuys = 1;
        8:  382:  state->playedCardCount = 0;
        8:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       48:  387:  for (k = 0; k < 5; k++){
       40:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
        8:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
        8:  394:  return 0;
        -:  395:}
        -:  396:
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
       63:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
       63:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
       17:  540:    for (i = 0; i < state->discardCount[player];i++){
       15:  541:      state->deck[player][i] = state->discard[player][i];
       15:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
        2:  545:    state->deckCount[player] = state->discardCount[player];
        2:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        2:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        2:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        2:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        2:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        2:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
        2:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  570:    state->deckCount[player]--;
        2:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
       61:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
       61:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
       61:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       61:  583:    state->deckCount[player]--;
       61:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
       63:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
        4:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
        4:  660:  int currentPlayer = whoseTurn(state);
        4:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
        4:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
        4:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
        4:  667:  int z = 0;// this is the counter for the temp hand
        4:  668:  if (nextPlayer > (state->numPlayers - 1)){
        2:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
        4:  674:  switch( card ) 
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
        2:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
        2:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
        -:  685:	{
    #####:  686:	  drawCard(currentPlayer, state);
        -:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
        -:  694:	{
    #####:  695:	  if ( i != currentPlayer )
        -:  696:	    {
    #####:  697:	      drawCard(i, state);
        -:  698:	    }
        -:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
    #####:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
    #####:  719:	if (supplyCount(choice1, state) <= 0){
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
        -:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
        -:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
        -:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
        -:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
        -:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
        2:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
    #####:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
    #####:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
    #####:  835:      discardCard(handPos, currentPlayer, state, 0);
    #####:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
    #####:  864:		isGameOver(state);
        -:  865:	      }
        -:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
        -:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
    #####:  881:	    isGameOver(state);
        -:  882:	  }
        -:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
        -:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
        -:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
        -:  941:			{
    #####:  942:			  drawCard(i, state);
        -:  943:			}
        -:  944:		    }
        -:  945:		}
        -:  946:	    }
        -:  947:				
        -:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
        -:  957:	}
    #####:  958:      else if (choice1 == 2)
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
        -:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
        -:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
        -:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
        -:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
        -: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1019:	  state->coins += 2;
        -: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
        -: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1049:	    {
    #####: 1050:	      j++;
        -: 1051:	    }
        -: 1052:	}
    #####: 1053:      if (j < choice2)
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1070:	    }
        -: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
        -: 1086:	    }
        -: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
        -: 1137:	}
    #####: 1138:      if (index > -1)
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
        -: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
        -: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
        2: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
        2: 1167:	int drawntreasure = 0;
        2: 1168:	int z =0; 
        -: 1169:	  
        9: 1170:	while(drawntreasure<2){
        5: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1172:			shuffle(currentPlayer, state);
        -: 1173:		}
        -: 1174:	
        5: 1175:		drawCard(currentPlayer, state);
        5: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        5: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        4: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
        1: 1181:			temphand[z]=cardDrawn;
        1: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
        5: 1187:	while(z-1>=0){
        1: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
        1: 1189:		z=z-1;
        -: 1190:    }
        2: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
        2: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
       10: 1198:    for (i = 0; i <= 3; i++){
        8: 1199:	  drawCard(currentPlayer, state);
        -: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
        2: 1203:    discardCard(handPos, currentPlayer, state, 0);
        2: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
    #####: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
        -: 1229:}
        -: 1230:
    #####: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
        -: 1256:		}
        -: 1257:					
        -: 1258:	    }
        -: 1259:				
        -: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
    #####: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
    #####: 1271:		if (i != currentPlayer){
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1277:		}
        -: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
        2: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
        2: 1291:  if (trashFlag < 1)
        -: 1292:    {
        -: 1293:      //add card to played pile
        2: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1295:      state->playedCardCount++;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
        2: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
        2: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        2: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
        2: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
        2: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
        2: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
        2: 1322:  return 0;
        -: 1323:}
        -: 1324:
    #####: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1330:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1331:    {
    #####: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
    #####: 1340:  if (toFlag == 1)
        -: 1341:    {
    #####: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:      state->deckCount[player]++;
        -: 1344:    }
    #####: 1345:  else if (toFlag == 2)
        -: 1346:    {
    #####: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:      state->handCount[player]++;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
    #####: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
    #####: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
    #####: 1359:  return 0;
        -: 1360:}
        -: 1361:
       10: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
       10: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
       60: 1370:  for (i = 0; i < state->handCount[player]; i++)
        -: 1371:    {
       50: 1372:      if (state->hand[player][i] == copper)
        -: 1373:	{
       32: 1374:	  state->coins += 1;
        -: 1375:	}
       18: 1376:      else if (state->hand[player][i] == silver)
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
        -: 1379:	}
       18: 1380:      else if (state->hand[player][i] == gold)
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
        -: 1383:	}	
        -: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
       10: 1387:  state->coins += bonus;
        -: 1388:
       10: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
        -: 1394:
Test suite for card council room effect
Test result for player 1
PASS: Player hand number
PASS: Player deck number
PASS: Player played card number
PASS: Player number of buys
PASS: The other player deck number
PASS: Coin number
PASS: Player discard number
PASS: The number of supply matches
Test result for player 2
PASS: Player hand number
PASS: Player deck number
PASS: Player played card number
PASS: Player number of buys
PASS: The other player deck number
PASS: Coin number
PASS: Player discard number
PASS: The number of supply matches
File 'cardtest3.c'
Lines executed:93.33% of 60
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:31.49% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://cardtest3.c
        -:    2://Created by Shiyi Zhang for Assignment 3
        -:    3://It is to test the council room card effect
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <stdio.h>
        -:    8:#include "rngs.h"
        -:    9:
       14:   10:void showTestResult(int expectedVal, int testVal, char *temp) {
       14:   11:    char *testName = temp;
       14:   12:    if (expectedVal == testVal) {
       14:   13:	    printf("PASS: %s", testName);
        -:   14:    } 
        -:   15:    else {
    #####:   16:	    printf("FAIL: %s - expected value is %d, but the actual value is %d", testName, expectedVal, testVal);
        -:   17:    }
       14:   18:    printf("\n");
       14:   19:}
        -:   20:
        1:   21:int main (int argc, char** argv) {
        -:   22:    struct gameState startState; 
        -:   23:    struct gameState endState;
        1:   24:    int numPlayers = 2;
        1:   25:    int handFlag = 0;
        1:   26:    int choice1 = -1;
        1:   27:    int choice2 = -1;
        1:   28:    int choice3 = -1;
        1:   29:    int bonus = 0;
        1:   30:    int seed = 10;
        1:   31:    int k[10] = {adventurer, council_room, gardens, mine, remodel, smithy, baron, great_hall, steward, village};
        -:   32:    int i;
        -:   33:    int expectedVal;
        -:   34:    int testVal;
        1:   35:    int tempFlag = 0;
        1:   36:    int numNewCardHand = 4;
        1:   37:    int numCardPlay = 1;
        -:   38:    int playerNum;
        1:   39:    int bonusBuyNum = 1;
        1:   40:    int numNewCardHand2 = 1;
        -:   41:
        1:   42:    initializeGame(numPlayers, k, seed, &startState);
        1:   43:    endState = startState;
        1:   44:    printf("Test suite for card council room effect\n");
        3:   45:    for (playerNum = 0; playerNum < numPlayers; playerNum++) {
        2:   46:	    cardEffect(council_room, choice1, choice2, choice3, &endState, handFlag, &bonus);
        2:   47:      printf("Test result for player %d\n", playerNum+1);
        2:   48:    	expectedVal = startState.handCount[playerNum] + numNewCardHand - numCardPlay;
        2:   49:    	testVal = endState.handCount[playerNum];
        2:   50:    	showTestResult(expectedVal, testVal, "Player hand number");
        -:   51:     
        2:   52:      expectedVal = playerNum == 1 ?
        2:   53:	      startState.deckCount[playerNum] - numNewCardHand - numNewCardHand2 : startState.deckCount[playerNum] - numNewCardHand;
        2:   54:	    testVal = endState.deckCount[playerNum];
        2:   55:	    showTestResult(expectedVal, testVal, "Player deck number"); 
        -:   56:    
        2:   57:    	expectedVal = startState.playedCardCount + numCardPlay;
        2:   58:    	testVal = endState.playedCardCount;
        2:   59:    	showTestResult(expectedVal, testVal, "Player played card number");
        -:   60:     
        2:   61:      expectedVal = startState.numBuys + bonusBuyNum;
        2:   62:	    testVal = endState.numBuys;
        2:   63:	    showTestResult(expectedVal, testVal, "Player number of buys");
        -:   64:
        2:   65:    	expectedVal = playerNum == 1 ? 
        2:   66:    	    startState.deckCount[1-playerNum] - numNewCardHand - numNewCardHand2 : startState.deckCount[1-playerNum] - numNewCardHand2;
        2:   67:    	testVal = endState.deckCount[1-playerNum];
        2:   68:    	showTestResult(expectedVal, testVal, "The other player deck number");
        -:   69:    
        2:   70:    	expectedVal = startState.coins;
        2:   71:    	testVal = endState.coins;
        2:   72:    	showTestResult(expectedVal, testVal, "Coin number");
        -:   73:
        2:   74:    	expectedVal = numNewCardHand + startState.handCount[playerNum] - numCardPlay;
        2:   75:    	endTurn(&endState);
        2:   76:    	endTurn(&startState);
        2:   77:    	testVal = endState.discardCount[playerNum];
        2:   78:    	showTestResult(expectedVal, testVal, "Player discard number");
        -:   79:
       56:   80:    	for (i = 0; i < treasure_map + 1; i++) {
       54:   81:    	    if (startState.supplyCount[i] != endState.supplyCount[i]) {
    #####:   82:    		    tempFlag = 1;
    #####:   83:    		  break;
        -:   84:    	    }
        -:   85:    	}
        2:   86:    	if (!tempFlag) {
        2:   87:    	    printf("PASS: The number of supply matches\n");
        -:   88:    	} 
        -:   89:      else {
    #####:   90:    	    printf("FAIL: The number of supply does not match %d\n", i);
        -:   91:    	}
        -:   92:    }
        1:   93:    return 0;
        -:   94:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
      130:   15:int compare(const void* a, const void* b) {
      130:   16:  if (*(int*)a > *(int*)b)
       11:   17:    return 1;
      119:   18:  if (*(int*)a < *(int*)b)
       26:   19:    return -1;
       93:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        3:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        3:   51:  SelectStream(1);
        3:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        3:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        3:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       33:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
      330:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      300:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        3:   80:  if (numPlayers == 2)
        -:   81:    {
        3:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        3:   94:  if (numPlayers == 2)
        -:   95:    {
        3:   96:      state->supplyCount[estate] = 8;
        3:   97:      state->supplyCount[duchy] = 8;
        3:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        3:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  109:  state->supplyCount[silver] = 40;
        3:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
       63:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
      495:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
      465:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       30:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
       12:  122:		  if (numPlayers == 2){ 
        6:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
       24:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       30:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      435:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
        9:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
        6:  147:      state->deckCount[i] = 0;
       24:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
       18:  150:	  state->deck[i][j] = estate;
       18:  151:	  state->deckCount[i]++;
        -:  152:	}
       48:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
       42:  155:	  state->deck[i][j] = copper;
       42:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
        9:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
        6:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
        9:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
        6:  173:      state->handCount[i] = 0;
        6:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
       84:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
       81:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        3:  189:  state->outpostPlayed = 0;
        3:  190:  state->phase = 0;
        3:  191:  state->numActions = 1;
        3:  192:  state->numBuys = 1;
        3:  193:  state->playedCardCount = 0;
        3:  194:  state->whoseTurn = 0;
        3:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       18:  199:  for (it = 0; it < 5; it++){
       15:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        3:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        3:  205:  return 0;
        -:  206:}
        -:  207:
        9:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        9:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        9:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        9:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      101:  221:  while (state->deckCount[player] > 0) {
       83:  222:    card = floor(Random() * state->deckCount[player]);
       83:  223:    newDeck[newDeckPos] = state->deck[player][card];
       83:  224:    newDeckPos++;
      223:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
      140:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
       83:  228:    state->deckCount[player]--;
        -:  229:  }
       92:  230:  for (i = 0; i < newDeckPos; i++) {
       83:  231:    state->deck[player][i] = newDeck[i];
       83:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
        9:  235:  return 0;
        -:  236:}
        -:  237:
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
       18:  353:int whoseTurn(struct gameState *state) {
       18:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
       12:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
       12:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
       88:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       76:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       76:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
       12:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
       12:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
        6:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
        6:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
       12:  377:  state->outpostPlayed = 0;
       12:  378:  state->phase = 0;
       12:  379:  state->numActions = 1;
       12:  380:  state->coins = 0;
       12:  381:  state->numBuys = 1;
       12:  382:  state->playedCardCount = 0;
       12:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       72:  387:  for (k = 0; k < 5; k++){
       60:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
       12:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
       12:  394:  return 0;
        -:  395:}
        -:  396:
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
       98:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
       98:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
       26:  540:    for (i = 0; i < state->discardCount[player];i++){
       23:  541:      state->deck[player][i] = state->discard[player][i];
       23:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
        3:  545:    state->deckCount[player] = state->discardCount[player];
        3:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        3:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        3:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        3:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        3:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        3:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
        3:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  570:    state->deckCount[player]--;
        3:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
       95:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
       95:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
       95:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       95:  583:    state->deckCount[player]--;
       95:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
       98:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
        6:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
        6:  660:  int currentPlayer = whoseTurn(state);
        6:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
        6:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
        6:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
        6:  667:  int z = 0;// this is the counter for the temp hand
        6:  668:  if (nextPlayer > (state->numPlayers - 1)){
        3:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
        6:  674:  switch( card ) 
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
        2:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
        2:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
       10:  684:      for (i = 0; i < 4; i++)
        -:  685:	{
        8:  686:	  drawCard(currentPlayer, state);
        -:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
        2:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
        6:  693:      for (i = 0; i < state->numPlayers; i++)
        -:  694:	{
        4:  695:	  if ( i != currentPlayer )
        -:  696:	    {
        2:  697:	      drawCard(i, state);
        -:  698:	    }
        -:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
        2:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
        2:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
    #####:  719:	if (supplyCount(choice1, state) <= 0){
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
        -:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
        -:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
        -:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
        -:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
        -:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
        2:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
    #####:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
    #####:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
    #####:  835:      discardCard(handPos, currentPlayer, state, 0);
    #####:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
    #####:  864:		isGameOver(state);
        -:  865:	      }
        -:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
        -:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
    #####:  881:	    isGameOver(state);
        -:  882:	  }
        -:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
        -:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
        -:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
        -:  941:			{
    #####:  942:			  drawCard(i, state);
        -:  943:			}
        -:  944:		    }
        -:  945:		}
        -:  946:	    }
        -:  947:				
        -:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
        -:  957:	}
    #####:  958:      else if (choice1 == 2)
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
        -:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
        -:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
        -:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
        -:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
        -: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1019:	  state->coins += 2;
        -: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
        -: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1049:	    {
    #####: 1050:	      j++;
        -: 1051:	    }
        -: 1052:	}
    #####: 1053:      if (j < choice2)
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1070:	    }
        -: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
        -: 1086:	    }
        -: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
        -: 1137:	}
    #####: 1138:      if (index > -1)
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
        -: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
        -: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
        2: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
        2: 1167:	int drawntreasure = 0;
        2: 1168:	int z =0; 
        -: 1169:	  
        9: 1170:	while(drawntreasure<2){
        5: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1172:			shuffle(currentPlayer, state);
        -: 1173:		}
        -: 1174:	
        5: 1175:		drawCard(currentPlayer, state);
        5: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        5: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        4: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
        1: 1181:			temphand[z]=cardDrawn;
        1: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
        5: 1187:	while(z-1>=0){
        1: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
        1: 1189:		z=z-1;
        -: 1190:    }
        2: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
        2: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
       10: 1198:    for (i = 0; i <= 3; i++){
        8: 1199:	  drawCard(currentPlayer, state);
        -: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
        2: 1203:    discardCard(handPos, currentPlayer, state, 0);
        2: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
    #####: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
        -: 1229:}
        -: 1230:
    #####: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
        -: 1256:		}
        -: 1257:					
        -: 1258:	    }
        -: 1259:				
        -: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
    #####: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
    #####: 1271:		if (i != currentPlayer){
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1277:		}
        -: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
        4: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
        4: 1291:  if (trashFlag < 1)
        -: 1292:    {
        -: 1293:      //add card to played pile
        4: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1295:      state->playedCardCount++;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
        4: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
        4: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        4: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
        4: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
        4: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
        4: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
        4: 1322:  return 0;
        -: 1323:}
        -: 1324:
    #####: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1330:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1331:    {
    #####: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
    #####: 1340:  if (toFlag == 1)
        -: 1341:    {
    #####: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:      state->deckCount[player]++;
        -: 1344:    }
    #####: 1345:  else if (toFlag == 2)
        -: 1346:    {
    #####: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:      state->handCount[player]++;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
    #####: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
    #####: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
    #####: 1359:  return 0;
        -: 1360:}
        -: 1361:
       15: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
       15: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
       90: 1370:  for (i = 0; i < state->handCount[player]; i++)
        -: 1371:    {
       75: 1372:      if (state->hand[player][i] == copper)
        -: 1373:	{
       49: 1374:	  state->coins += 1;
        -: 1375:	}
       26: 1376:      else if (state->hand[player][i] == silver)
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
        -: 1379:	}
       26: 1380:      else if (state->hand[player][i] == gold)
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
        -: 1383:	}	
        -: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
       15: 1387:  state->coins += bonus;
        -: 1388:
       15: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
        -: 1394:
Test suite for card village effect
Test result for player 1
PASS: Player hand number
PASS: Player deck number
PASS: Player played card number
PASS: Player actions number
PASS: The other player deck number
PASS: Coin number
PASS: Player discard number
PASS: The number of supply matches
Test result for player 2
PASS: Player hand number
PASS: Player deck number
PASS: Player played card number
PASS: Player actions number
PASS: The other player deck number
PASS: Coin number
PASS: Player discard number
PASS: The number of supply matches
File 'cardtest4.c'
Lines executed:93.10% of 58
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:32.21% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://cardtest4.c
        -:    2://Created by Shiyi Zhang for Assignment 3
        -:    3://It is to test the village card effect
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <stdio.h>
        -:    8:#include "rngs.h"
        -:    9:
       14:   10:void showTestResult(int expectedVal, int testVal, char *temp) {
       14:   11:    char *testName = temp;
       14:   12:    if (expectedVal == testVal) {
       14:   13:	    printf("PASS: %s", testName);
        -:   14:    } 
        -:   15:    else {
    #####:   16:	    printf("FAIL: %s - expected value is %d, but the actual value is %d", testName, expectedVal, testVal);
        -:   17:    }
       14:   18:    printf("\n");
       14:   19:}
        -:   20:
        1:   21:int main (int argc, char** argv) {
        -:   22:    struct gameState startState; 
        -:   23:    struct gameState endState;
        1:   24:    int numPlayers = 2;
        1:   25:    int handFlag = 0;
        1:   26:    int choice1 = -1;
        1:   27:    int choice2 = -1;
        1:   28:    int choice3 = -1;
        1:   29:    int bonus = 0;
        1:   30:    int seed = 10;
        1:   31:    int k[10] = {adventurer, council_room, gardens, mine, remodel, smithy, baron, great_hall, steward, village};
        -:   32:    int i;
        -:   33:    int expectedVal;
        -:   34:    int testVal;
        1:   35:    int tempFlag = 0;
        1:   36:    int numNewCardHand = 1;
        1:   37:    int numCardPlay = 1;
        -:   38:    int playerNum;
        1:   39:    int numAction = 2;
        -:   40:
        1:   41:    initializeGame(numPlayers, k, seed, &startState);
        1:   42:    endState = startState;
        1:   43:    printf("Test suite for card village effect\n");
        3:   44:    for (playerNum = 0; playerNum < numPlayers; playerNum++) {
        2:   45:	    cardEffect(village, choice1, choice2, choice3, &endState, handFlag, &bonus);
        2:   46:      printf("Test result for player %d\n", playerNum+1);
        2:   47:    	expectedVal = startState.handCount[playerNum] + numNewCardHand - numCardPlay;
        2:   48:    	testVal = endState.handCount[playerNum];
        2:   49:    	showTestResult(expectedVal, testVal, "Player hand number");
        -:   50:     
        2:   51:      expectedVal = startState.deckCount[playerNum] - numNewCardHand;
        2:   52:	    testVal = endState.deckCount[playerNum];
        2:   53:	    showTestResult(expectedVal, testVal, "Player deck number"); 
        -:   54:    
        2:   55:    	expectedVal = startState.playedCardCount + numCardPlay;
        2:   56:    	testVal = endState.playedCardCount;
        2:   57:    	showTestResult(expectedVal, testVal, "Player played card number");
        -:   58:     
        2:   59:      expectedVal = startState.numActions + numAction;
        2:   60:	    testVal = endState.numActions;
        2:   61:	    showTestResult(expectedVal, testVal, "Player actions number");
        -:   62:    
        2:   63:    	expectedVal = playerNum == 1 ? 
        2:   64:    	    startState.deckCount[1-playerNum] - numNewCardHand : startState.deckCount[1-playerNum];
        2:   65:    	testVal = endState.deckCount[1-playerNum];
        2:   66:    	showTestResult(expectedVal, testVal, "The other player deck number");
        -:   67:    
        2:   68:    	expectedVal = startState.coins;
        2:   69:    	testVal = endState.coins;
        2:   70:    	showTestResult(expectedVal, testVal, "Coin number");
        -:   71:
        2:   72:    	expectedVal = numNewCardHand + startState.handCount[playerNum] - numCardPlay;
        2:   73:    	endTurn(&endState);
        2:   74:    	endTurn(&startState);
        2:   75:    	testVal = endState.discardCount[playerNum];
        2:   76:    	showTestResult(expectedVal, testVal, "Player discard number");
        -:   77:
       56:   78:    	for (i = 0; i < treasure_map + 1; i++) {
       54:   79:    	    if (startState.supplyCount[i] != endState.supplyCount[i]) {
    #####:   80:    		    tempFlag = 1;
    #####:   81:    		  break;
        -:   82:    	    }
        -:   83:    	}
        2:   84:    	if (!tempFlag) {
        2:   85:    	    printf("PASS: The number of supply matches\n");
        -:   86:    	} 
        -:   87:      else {
    #####:   88:    	    printf("FAIL: The number of supply does not match %d\n", i);
        -:   89:    	}
        -:   90:    }
        1:   91:    return 0;
        -:   92:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
      167:   15:int compare(const void* a, const void* b) {
      167:   16:  if (*(int*)a > *(int*)b)
       13:   17:    return 1;
      154:   18:  if (*(int*)a < *(int*)b)
       35:   19:    return -1;
      119:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        4:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        4:   51:  SelectStream(1);
        4:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        4:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        4:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       44:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
      440:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      400:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        4:   80:  if (numPlayers == 2)
        -:   81:    {
        4:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        4:   94:  if (numPlayers == 2)
        -:   95:    {
        4:   96:      state->supplyCount[estate] = 8;
        4:   97:      state->supplyCount[duchy] = 8;
        4:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        4:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  109:  state->supplyCount[silver] = 40;
        4:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
       84:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
      660:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
      620:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       40:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
       16:  122:		  if (numPlayers == 2){ 
        8:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
       32:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       40:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      580:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       12:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
        8:  147:      state->deckCount[i] = 0;
       32:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
       24:  150:	  state->deck[i][j] = estate;
       24:  151:	  state->deckCount[i]++;
        -:  152:	}
       64:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
       56:  155:	  state->deck[i][j] = copper;
       56:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       12:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
        8:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
       12:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
        8:  173:      state->handCount[i] = 0;
        8:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      112:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
      108:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        4:  189:  state->outpostPlayed = 0;
        4:  190:  state->phase = 0;
        4:  191:  state->numActions = 1;
        4:  192:  state->numBuys = 1;
        4:  193:  state->playedCardCount = 0;
        4:  194:  state->whoseTurn = 0;
        4:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       24:  199:  for (it = 0; it < 5; it++){
       20:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        4:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        4:  205:  return 0;
        -:  206:}
        -:  207:
       12:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       12:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       12:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       12:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      132:  221:  while (state->deckCount[player] > 0) {
      108:  222:    card = floor(Random() * state->deckCount[player]);
      108:  223:    newDeck[newDeckPos] = state->deck[player][card];
      108:  224:    newDeckPos++;
      287:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
      179:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
      108:  228:    state->deckCount[player]--;
        -:  229:  }
      120:  230:  for (i = 0; i < newDeckPos; i++) {
      108:  231:    state->deck[player][i] = newDeck[i];
      108:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
       12:  235:  return 0;
        -:  236:}
        -:  237:
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
       24:  353:int whoseTurn(struct gameState *state) {
       24:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
       16:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
       16:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
      112:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       96:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       96:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
       16:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
       16:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
        8:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
        8:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
       16:  377:  state->outpostPlayed = 0;
       16:  378:  state->phase = 0;
       16:  379:  state->numActions = 1;
       16:  380:  state->coins = 0;
       16:  381:  state->numBuys = 1;
       16:  382:  state->playedCardCount = 0;
       16:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       96:  387:  for (k = 0; k < 5; k++){
       80:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
       16:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
       16:  394:  return 0;
        -:  395:}
        -:  396:
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
      125:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
      125:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
       32:  540:    for (i = 0; i < state->discardCount[player];i++){
       28:  541:      state->deck[player][i] = state->discard[player][i];
       28:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
        4:  545:    state->deckCount[player] = state->discardCount[player];
        4:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        4:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        4:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        4:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        4:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        4:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
        4:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  570:    state->deckCount[player]--;
        4:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
      121:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
      121:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
      121:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      121:  583:    state->deckCount[player]--;
      121:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
      125:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
        8:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
        8:  660:  int currentPlayer = whoseTurn(state);
        8:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
        8:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
        8:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
        8:  667:  int z = 0;// this is the counter for the temp hand
        8:  668:  if (nextPlayer > (state->numPlayers - 1)){
        4:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
        8:  674:  switch( card ) 
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
        2:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
        2:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
       10:  684:      for (i = 0; i < 4; i++)
        -:  685:	{
        8:  686:	  drawCard(currentPlayer, state);
        -:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
        2:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
        6:  693:      for (i = 0; i < state->numPlayers; i++)
        -:  694:	{
        4:  695:	  if ( i != currentPlayer )
        -:  696:	    {
        2:  697:	      drawCard(i, state);
        -:  698:	    }
        -:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
        2:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
        2:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
    #####:  719:	if (supplyCount(choice1, state) <= 0){
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
        -:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
        -:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
        -:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
        -:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
        -:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
        2:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
        2:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
        2:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
        2:  835:      discardCard(handPos, currentPlayer, state, 0);
        2:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
    #####:  864:		isGameOver(state);
        -:  865:	      }
        -:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
        -:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
    #####:  881:	    isGameOver(state);
        -:  882:	  }
        -:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
        -:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
        -:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
        -:  941:			{
    #####:  942:			  drawCard(i, state);
        -:  943:			}
        -:  944:		    }
        -:  945:		}
        -:  946:	    }
        -:  947:				
        -:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
        -:  957:	}
    #####:  958:      else if (choice1 == 2)
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
        -:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
        -:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
        -:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
        -:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
        -: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1019:	  state->coins += 2;
        -: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
        -: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1049:	    {
    #####: 1050:	      j++;
        -: 1051:	    }
        -: 1052:	}
    #####: 1053:      if (j < choice2)
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1070:	    }
        -: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
        -: 1086:	    }
        -: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
        -: 1137:	}
    #####: 1138:      if (index > -1)
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
        -: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
        -: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
        2: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
        2: 1167:	int drawntreasure = 0;
        2: 1168:	int z =0; 
        -: 1169:	  
        9: 1170:	while(drawntreasure<2){
        5: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1172:			shuffle(currentPlayer, state);
        -: 1173:		}
        -: 1174:	
        5: 1175:		drawCard(currentPlayer, state);
        5: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        5: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        4: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
        1: 1181:			temphand[z]=cardDrawn;
        1: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
        5: 1187:	while(z-1>=0){
        1: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
        1: 1189:		z=z-1;
        -: 1190:    }
        2: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
        2: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
       10: 1198:    for (i = 0; i <= 3; i++){
        8: 1199:	  drawCard(currentPlayer, state);
        -: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
        2: 1203:    discardCard(handPos, currentPlayer, state, 0);
        2: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
    #####: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
        -: 1229:}
        -: 1230:
    #####: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
        -: 1256:		}
        -: 1257:					
        -: 1258:	    }
        -: 1259:				
        -: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
    #####: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
    #####: 1271:		if (i != currentPlayer){
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1277:		}
        -: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
        6: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
        6: 1291:  if (trashFlag < 1)
        -: 1292:    {
        -: 1293:      //add card to played pile
        6: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1295:      state->playedCardCount++;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
        6: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
        6: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        6: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
        6: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
        6: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
        6: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
        6: 1322:  return 0;
        -: 1323:}
        -: 1324:
    #####: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1330:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1331:    {
    #####: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
    #####: 1340:  if (toFlag == 1)
        -: 1341:    {
    #####: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:      state->deckCount[player]++;
        -: 1344:    }
    #####: 1345:  else if (toFlag == 2)
        -: 1346:    {
    #####: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:      state->handCount[player]++;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
    #####: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
    #####: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
    #####: 1359:  return 0;
        -: 1360:}
        -: 1361:
       20: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
       20: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
      120: 1370:  for (i = 0; i < state->handCount[player]; i++)
        -: 1371:    {
      100: 1372:      if (state->hand[player][i] == copper)
        -: 1373:	{
       64: 1374:	  state->coins += 1;
        -: 1375:	}
       36: 1376:      else if (state->hand[player][i] == silver)
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
        -: 1379:	}
       36: 1380:      else if (state->hand[player][i] == gold)
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
        -: 1383:	}	
        -: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
       20: 1387:  state->coins += bonus;
        -: 1388:
       20: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
        -: 1394:
Test suite for function updateCoins
Test case 1: PASS
There should be 4 coins for player in first hand
Test case 2: PASS
 There should be 8 coins for player in second hand
File 'unittest1.c'
Lines executed:100.00% of 24
Creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:32.56% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unitest1.c
        -:    2://Created by Shiyi Zhang for Assignment 3
        -:    3://It is to test the function updataCoins
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <stdio.h>
        -:    7:#include "rngs.h"
        -:    8:
        1:    9:int main(int argc, char** argv){
        -:   10:    struct gameState testState;
        1:   11:    int numPlayers = 2;
        1:   12:    int playersNum = 0;
        1:   13:    int selectSeed = 10;
        1:   14:    int k[] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   15:	sea_hag, tribute, smithy};
        1:   16:    int bonus = 0;
        -:   17:    int testVal;
        -:   18:    int expectedVal;
        -:   19:
        -:   20:    //initialze the game
        1:   21:    initializeGame(numPlayers, k, selectSeed, &testState);
        1:   22:    printf("Test suite for function updateCoins\n");
        1:   23:    printf("Test case 1: ");
        1:   24:    expectedVal = 4;
        1:   25:    updateCoins(playersNum, &testState, bonus);
        1:   26:    testVal = testState.coins;
        1:   27:    printf("%s\n", (testVal == expectedVal) ? "PASS" : "FAIL");
        1:   28:    printf("There should be 4 coins for player in first hand\n");
        -:   29:    
        -:   30:    //Player now have 1 gold, 1 silver, 2 copper and 1 bonus
        1:   31:    testState.hand[playersNum][0] = gold;
        1:   32:    testState.hand[playersNum][1] = silver;
        1:   33:    bonus = 1;
        1:   34:    printf("Test case 2: ");
        1:   35:    expectedVal = 8;
        1:   36:    updateCoins(playersNum, &testState, bonus);
        1:   37:    testVal = testState.coins;
        1:   38:    printf("%s\n", (testVal == expectedVal) ? "PASS" : "FAIL");
        1:   39:    printf(" There should be 8 coins for player in second hand\n");
        1:   40:    return 0;
        -:   41:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
      197:   15:int compare(const void* a, const void* b) {
      197:   16:  if (*(int*)a > *(int*)b)
       13:   17:    return 1;
      184:   18:  if (*(int*)a < *(int*)b)
       43:   19:    return -1;
      141:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        5:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        5:   51:  SelectStream(1);
        5:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        5:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        5:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       55:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
      550:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      500:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        5:   80:  if (numPlayers == 2)
        -:   81:    {
        5:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        5:   94:  if (numPlayers == 2)
        -:   95:    {
        5:   96:      state->supplyCount[estate] = 8;
        5:   97:      state->supplyCount[duchy] = 8;
        5:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        5:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  109:  state->supplyCount[silver] = 40;
        5:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      105:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
      825:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
      775:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       50:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
       18:  122:		  if (numPlayers == 2){ 
        9:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
       41:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       50:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      725:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       15:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
       10:  147:      state->deckCount[i] = 0;
       40:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
       30:  150:	  state->deck[i][j] = estate;
       30:  151:	  state->deckCount[i]++;
        -:  152:	}
       80:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
       70:  155:	  state->deck[i][j] = copper;
       70:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       15:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
       10:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
       15:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       10:  173:      state->handCount[i] = 0;
       10:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      140:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
      135:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        5:  189:  state->outpostPlayed = 0;
        5:  190:  state->phase = 0;
        5:  191:  state->numActions = 1;
        5:  192:  state->numBuys = 1;
        5:  193:  state->playedCardCount = 0;
        5:  194:  state->whoseTurn = 0;
        5:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       30:  199:  for (it = 0; it < 5; it++){
       25:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        5:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        5:  205:  return 0;
        -:  206:}
        -:  207:
       14:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       14:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       14:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       14:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      156:  221:  while (state->deckCount[player] > 0) {
      128:  222:    card = floor(Random() * state->deckCount[player]);
      128:  223:    newDeck[newDeckPos] = state->deck[player][card];
      128:  224:    newDeckPos++;
      344:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
      216:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
      128:  228:    state->deckCount[player]--;
        -:  229:  }
      142:  230:  for (i = 0; i < newDeckPos; i++) {
      128:  231:    state->deck[player][i] = newDeck[i];
      128:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
       14:  235:  return 0;
        -:  236:}
        -:  237:
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
       24:  353:int whoseTurn(struct gameState *state) {
       24:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
       16:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
       16:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
      112:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       96:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       96:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
       16:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
       16:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
        8:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
        8:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
       16:  377:  state->outpostPlayed = 0;
       16:  378:  state->phase = 0;
       16:  379:  state->numActions = 1;
       16:  380:  state->coins = 0;
       16:  381:  state->numBuys = 1;
       16:  382:  state->playedCardCount = 0;
       16:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       96:  387:  for (k = 0; k < 5; k++){
       80:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
       16:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
       16:  394:  return 0;
        -:  395:}
        -:  396:
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
      130:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
      130:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
       32:  540:    for (i = 0; i < state->discardCount[player];i++){
       28:  541:      state->deck[player][i] = state->discard[player][i];
       28:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
        4:  545:    state->deckCount[player] = state->discardCount[player];
        4:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        4:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        4:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        4:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        4:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        4:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
        4:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  570:    state->deckCount[player]--;
        4:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
      126:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
      126:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
      126:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      126:  583:    state->deckCount[player]--;
      126:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
      130:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
        8:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
        8:  660:  int currentPlayer = whoseTurn(state);
        8:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
        8:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
        8:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
        8:  667:  int z = 0;// this is the counter for the temp hand
        8:  668:  if (nextPlayer > (state->numPlayers - 1)){
        4:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
        8:  674:  switch( card ) 
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
        2:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
        2:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
       10:  684:      for (i = 0; i < 4; i++)
        -:  685:	{
        8:  686:	  drawCard(currentPlayer, state);
        -:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
        2:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
        6:  693:      for (i = 0; i < state->numPlayers; i++)
        -:  694:	{
        4:  695:	  if ( i != currentPlayer )
        -:  696:	    {
        2:  697:	      drawCard(i, state);
        -:  698:	    }
        -:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
        2:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
        2:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
    #####:  719:	if (supplyCount(choice1, state) <= 0){
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
        -:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
        -:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
        -:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
        -:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
        -:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
        2:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
        2:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
        2:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
        2:  835:      discardCard(handPos, currentPlayer, state, 0);
        2:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
    #####:  864:		isGameOver(state);
        -:  865:	      }
        -:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
        -:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
    #####:  881:	    isGameOver(state);
        -:  882:	  }
        -:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
        -:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
        -:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
        -:  941:			{
    #####:  942:			  drawCard(i, state);
        -:  943:			}
        -:  944:		    }
        -:  945:		}
        -:  946:	    }
        -:  947:				
        -:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
        -:  957:	}
    #####:  958:      else if (choice1 == 2)
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
        -:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
        -:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
        -:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
        -:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
        -: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1019:	  state->coins += 2;
        -: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
        -: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1049:	    {
    #####: 1050:	      j++;
        -: 1051:	    }
        -: 1052:	}
    #####: 1053:      if (j < choice2)
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1070:	    }
        -: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
        -: 1086:	    }
        -: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
        -: 1137:	}
    #####: 1138:      if (index > -1)
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
        -: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
        -: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
        2: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
        2: 1167:	int drawntreasure = 0;
        2: 1168:	int z =0; 
        -: 1169:	  
        9: 1170:	while(drawntreasure<2){
        5: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1172:			shuffle(currentPlayer, state);
        -: 1173:		}
        -: 1174:	
        5: 1175:		drawCard(currentPlayer, state);
        5: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        5: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        4: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
        1: 1181:			temphand[z]=cardDrawn;
        1: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
        5: 1187:	while(z-1>=0){
        1: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
        1: 1189:		z=z-1;
        -: 1190:    }
        2: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
        2: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
       10: 1198:    for (i = 0; i <= 3; i++){
        8: 1199:	  drawCard(currentPlayer, state);
        -: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
        2: 1203:    discardCard(handPos, currentPlayer, state, 0);
        2: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
    #####: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
        -: 1229:}
        -: 1230:
    #####: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
        -: 1256:		}
        -: 1257:					
        -: 1258:	    }
        -: 1259:				
        -: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
    #####: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
    #####: 1271:		if (i != currentPlayer){
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1277:		}
        -: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
        6: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
        6: 1291:  if (trashFlag < 1)
        -: 1292:    {
        -: 1293:      //add card to played pile
        6: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1295:      state->playedCardCount++;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
        6: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
        6: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        6: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
        6: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
        6: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
        6: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
        6: 1322:  return 0;
        -: 1323:}
        -: 1324:
    #####: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1330:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1331:    {
    #####: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
    #####: 1340:  if (toFlag == 1)
        -: 1341:    {
    #####: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:      state->deckCount[player]++;
        -: 1344:    }
    #####: 1345:  else if (toFlag == 2)
        -: 1346:    {
    #####: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:      state->handCount[player]++;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
    #####: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
    #####: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
    #####: 1359:  return 0;
        -: 1360:}
        -: 1361:
       23: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
       23: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
      138: 1370:  for (i = 0; i < state->handCount[player]; i++)
        -: 1371:    {
      115: 1372:      if (state->hand[player][i] == copper)
        -: 1373:	{
       74: 1374:	  state->coins += 1;
        -: 1375:	}
       41: 1376:      else if (state->hand[player][i] == silver)
        -: 1377:	{
        1: 1378:	  state->coins += 2;
        -: 1379:	}
       40: 1380:      else if (state->hand[player][i] == gold)
        -: 1381:	{
        1: 1382:	  state->coins += 3;
        -: 1383:	}	
        -: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
       23: 1387:  state->coins += bonus;
        -: 1388:
       23: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
        -: 1394:
Test suite for function isGameOver
Test case 1: PASS
 The function should return 0, because it still has a province card and no empty supply piles
Test case 2: PASS
 The function should return 1, because it has no province card in supply piles
Test case 3: PASS
 The function should return 1, because three of the supply piles (expcept province pile) become 0
File 'unittest2.c'
Lines executed:100.00% of 24
Creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:34.34% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unitest2.c
        -:    2://Created by Shiyi Zhang for Assignment 3
        -:    3://It is to test the function isGameOver 
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <stdio.h>
        -:    7:#include "rngs.h"
        -:    8:
        1:    9:int main (int argc, char** argv) {
        -:   10:    struct gameState testState;
        -:   11:    int i;
        1:   12:    int pilesNumber = 25;
        -:   13:    int testVal;
        -:   14:    int expectedVal;
        -:   15:
        -:   16:    //initiliaze each of the supply pile for only one card 
        -:   17:    //To easy test
       26:   18:    for (i = 0; i < pilesNumber; i++){
       25:   19:	    testState.supplyCount[i] = 1;
        -:   20:     }
        1:   21:    printf("Test suite for function isGameOver\n");
        -:   22:    
        1:   23:    printf("Test case 1: ");
        1:   24:    expectedVal = 0;
        1:   25:    testVal = isGameOver(&testState);
        1:   26:    printf("%s\n", (testVal == expectedVal) ? "PASS" : "FAIL");
        1:   27:    printf(" The function should return 0, because it still has a province card and no empty supply piles\n");
        -:   28:
        1:   29:    printf("Test case 2: ");
        1:   30:    expectedVal = 1;
        1:   31:    testState.supplyCount[province] = 0;
        1:   32:    testVal = isGameOver(&testState);
        1:   33:    printf("%s\n", (testVal == expectedVal) ? "PASS" : "FAIL");
        1:   34:    printf(" The function should return 1, because it has no province card in supply piles\n");
        -:   35:
        1:   36:    printf("Test case 3: ");
        1:   37:    expectedVal = 1;
        1:   38:    testState.supplyCount[province] = 1;
        1:   39:    testState.supplyCount[smithy] = testState.supplyCount[council_room] = testState.supplyCount[adventurer] = 0;
        1:   40:    testVal = isGameOver(&testState);
        1:   41:    printf("%s\n", (testVal == expectedVal) ? "PASS" : "FAIL");
        1:   42:    printf(" The function should return 1, because three of the supply piles (expcept province pile) become 0\n");
        -:   43:
        1:   44:    return 0;
        -:   45:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
      197:   15:int compare(const void* a, const void* b) {
      197:   16:  if (*(int*)a > *(int*)b)
       13:   17:    return 1;
      184:   18:  if (*(int*)a < *(int*)b)
       43:   19:    return -1;
      141:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        5:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        5:   51:  SelectStream(1);
        5:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        5:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        5:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       55:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
      550:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      500:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        5:   80:  if (numPlayers == 2)
        -:   81:    {
        5:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        5:   94:  if (numPlayers == 2)
        -:   95:    {
        5:   96:      state->supplyCount[estate] = 8;
        5:   97:      state->supplyCount[duchy] = 8;
        5:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        5:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  109:  state->supplyCount[silver] = 40;
        5:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      105:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
      825:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
      775:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       50:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
       18:  122:		  if (numPlayers == 2){ 
        9:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
       41:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       50:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      725:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       15:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
       10:  147:      state->deckCount[i] = 0;
       40:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
       30:  150:	  state->deck[i][j] = estate;
       30:  151:	  state->deckCount[i]++;
        -:  152:	}
       80:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
       70:  155:	  state->deck[i][j] = copper;
       70:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       15:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
       10:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
       15:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       10:  173:      state->handCount[i] = 0;
       10:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      140:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
      135:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        5:  189:  state->outpostPlayed = 0;
        5:  190:  state->phase = 0;
        5:  191:  state->numActions = 1;
        5:  192:  state->numBuys = 1;
        5:  193:  state->playedCardCount = 0;
        5:  194:  state->whoseTurn = 0;
        5:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       30:  199:  for (it = 0; it < 5; it++){
       25:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        5:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        5:  205:  return 0;
        -:  206:}
        -:  207:
       14:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       14:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       14:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       14:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      156:  221:  while (state->deckCount[player] > 0) {
      128:  222:    card = floor(Random() * state->deckCount[player]);
      128:  223:    newDeck[newDeckPos] = state->deck[player][card];
      128:  224:    newDeckPos++;
      344:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
      216:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
      128:  228:    state->deckCount[player]--;
        -:  229:  }
      142:  230:  for (i = 0; i < newDeckPos; i++) {
      128:  231:    state->deck[player][i] = newDeck[i];
      128:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
       14:  235:  return 0;
        -:  236:}
        -:  237:
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
       24:  353:int whoseTurn(struct gameState *state) {
       24:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
       16:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
       16:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
      112:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       96:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       96:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
       16:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
       16:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
        8:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
        8:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
       16:  377:  state->outpostPlayed = 0;
       16:  378:  state->phase = 0;
       16:  379:  state->numActions = 1;
       16:  380:  state->coins = 0;
       16:  381:  state->numBuys = 1;
       16:  382:  state->playedCardCount = 0;
       16:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       96:  387:  for (k = 0; k < 5; k++){
       80:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
       16:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
       16:  394:  return 0;
        -:  395:}
        -:  396:
        3:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
        3:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
        1:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
        2:  408:  j = 0;
       52:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
       50:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
        3:  413:	  j++;
        -:  414:	}
        -:  415:    }
        2:  416:  if ( j >= 3)
        -:  417:    {
        1:  418:      return 1;
        -:  419:    }
        -:  420:
        1:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
      130:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
      130:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
       32:  540:    for (i = 0; i < state->discardCount[player];i++){
       28:  541:      state->deck[player][i] = state->discard[player][i];
       28:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
        4:  545:    state->deckCount[player] = state->discardCount[player];
        4:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        4:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        4:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        4:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        4:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        4:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
        4:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  570:    state->deckCount[player]--;
        4:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
      126:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
      126:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
      126:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      126:  583:    state->deckCount[player]--;
      126:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
      130:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
        8:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
        8:  660:  int currentPlayer = whoseTurn(state);
        8:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
        8:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
        8:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
        8:  667:  int z = 0;// this is the counter for the temp hand
        8:  668:  if (nextPlayer > (state->numPlayers - 1)){
        4:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
        8:  674:  switch( card ) 
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
        2:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
        2:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
       10:  684:      for (i = 0; i < 4; i++)
        -:  685:	{
        8:  686:	  drawCard(currentPlayer, state);
        -:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
        2:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
        6:  693:      for (i = 0; i < state->numPlayers; i++)
        -:  694:	{
        4:  695:	  if ( i != currentPlayer )
        -:  696:	    {
        2:  697:	      drawCard(i, state);
        -:  698:	    }
        -:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
        2:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
        2:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
    #####:  719:	if (supplyCount(choice1, state) <= 0){
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
        -:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
        -:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
        -:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
        -:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
        -:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
        2:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
        2:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
        2:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
        2:  835:      discardCard(handPos, currentPlayer, state, 0);
        2:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
    #####:  864:		isGameOver(state);
        -:  865:	      }
        -:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
        -:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
    #####:  881:	    isGameOver(state);
        -:  882:	  }
        -:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
        -:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
        -:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
        -:  941:			{
    #####:  942:			  drawCard(i, state);
        -:  943:			}
        -:  944:		    }
        -:  945:		}
        -:  946:	    }
        -:  947:				
        -:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
        -:  957:	}
    #####:  958:      else if (choice1 == 2)
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
        -:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
        -:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
        -:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
        -:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
        -: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1019:	  state->coins += 2;
        -: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
        -: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1049:	    {
    #####: 1050:	      j++;
        -: 1051:	    }
        -: 1052:	}
    #####: 1053:      if (j < choice2)
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1070:	    }
        -: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
        -: 1086:	    }
        -: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
        -: 1137:	}
    #####: 1138:      if (index > -1)
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
        -: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
        -: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
        2: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
        2: 1167:	int drawntreasure = 0;
        2: 1168:	int z =0; 
        -: 1169:	  
        9: 1170:	while(drawntreasure<2){
        5: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1172:			shuffle(currentPlayer, state);
        -: 1173:		}
        -: 1174:	
        5: 1175:		drawCard(currentPlayer, state);
        5: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        5: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        4: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
        1: 1181:			temphand[z]=cardDrawn;
        1: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
        5: 1187:	while(z-1>=0){
        1: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
        1: 1189:		z=z-1;
        -: 1190:    }
        2: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
        2: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
       10: 1198:    for (i = 0; i <= 3; i++){
        8: 1199:	  drawCard(currentPlayer, state);
        -: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
        2: 1203:    discardCard(handPos, currentPlayer, state, 0);
        2: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
    #####: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
        -: 1229:}
        -: 1230:
    #####: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
        -: 1256:		}
        -: 1257:					
        -: 1258:	    }
        -: 1259:				
        -: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
    #####: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
    #####: 1271:		if (i != currentPlayer){
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1277:		}
        -: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
        6: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
        6: 1291:  if (trashFlag < 1)
        -: 1292:    {
        -: 1293:      //add card to played pile
        6: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1295:      state->playedCardCount++;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
        6: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
        6: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        6: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
        6: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
        6: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
        6: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
        6: 1322:  return 0;
        -: 1323:}
        -: 1324:
    #####: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1330:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1331:    {
    #####: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
    #####: 1340:  if (toFlag == 1)
        -: 1341:    {
    #####: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:      state->deckCount[player]++;
        -: 1344:    }
    #####: 1345:  else if (toFlag == 2)
        -: 1346:    {
    #####: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:      state->handCount[player]++;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
    #####: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
    #####: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
    #####: 1359:  return 0;
        -: 1360:}
        -: 1361:
       23: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
       23: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
      138: 1370:  for (i = 0; i < state->handCount[player]; i++)
        -: 1371:    {
      115: 1372:      if (state->hand[player][i] == copper)
        -: 1373:	{
       74: 1374:	  state->coins += 1;
        -: 1375:	}
       41: 1376:      else if (state->hand[player][i] == silver)
        -: 1377:	{
        1: 1378:	  state->coins += 2;
        -: 1379:	}
       40: 1380:      else if (state->hand[player][i] == gold)
        -: 1381:	{
        1: 1382:	  state->coins += 3;
        -: 1383:	}	
        -: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
       23: 1387:  state->coins += bonus;
        -: 1388:
       23: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
        -: 1394:
Test suite for function getCost
Test case 1: PASS the test case 1
Test case 2: PASS the test case 2
File 'unittest3.c'
Lines executed:80.95% of 21
Creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:39.68% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unittest.c
        -:    2://Created by Shiyi Zhang for Assignment 3
        -:    3://It is to test the function getCost 
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <stdio.h>
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:
        1:   10:int main (int argc, char** argv) {
        -:   11:    //card cost form refer to http://wiki.dominionstrategy.com/index.php/List_of_cards
        1:   12:    int cardsCost[] = { 0,2,5,8,0,3,6,6,5,4,4,5,4,4,3,4,3,5,3,5,3,4,2,5,4,4,4 };
        -:   13:    int i;
        -:   14:    int expectedVal;
        -:   15:    int testVal;
        1:   16:    int cardsCount = treasure_map + 1;
        1:   17:    int tempFlag = 0;
        -:   18:
        -:   19:    //Use the above reference to test the function getCost
        1:   20:    printf("Test suite for function getCost\n");
       28:   21:    for (i = 0; i < cardsCount; i++) {
       27:   22:	    testVal = getCost(i);
       27:   23:	    expectedVal = cardsCost[i];
       27:   24:	    if (expectedVal != testVal) {
    #####:   25:	        tempFlag = 1;
    #####:   26:	        break;
        -:   27:	    }
        -:   28:    }
        -:   29:    //Test Case 1
        1:   30:    if (tempFlag) {
    #####:   31:	    printf("Test case 1: FAIL for card index %d. The expected value is %d, but test value is %d\n", i, expectedVal, testVal);
        -:   32:    } 
        -:   33:    else {
        1:   34:	    printf("Test case 1: PASS the test case 1\n");
        -:   35:    }
        -:   36:    //Test Case 2
        1:   37:    i = 77;
        1:   38:    testVal = getCost(i);
        1:   39:    expectedVal = -1;
        1:   40:    if (expectedVal != testVal) {
    #####:   41:	    printf("Test case 2: FAIL for invalid card index %d. The expected value is %d, but test value is %d\n", i, expectedVal, testVal);
        -:   42:    } 
        -:   43:    else {
        1:   44:	    printf("Test case 2: PASS the test case 2\n");
        -:   45:    }
        -:   46:
        1:   47:    return 0;
        -:   48:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
      197:   15:int compare(const void* a, const void* b) {
      197:   16:  if (*(int*)a > *(int*)b)
       13:   17:    return 1;
      184:   18:  if (*(int*)a < *(int*)b)
       43:   19:    return -1;
      141:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        5:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        5:   51:  SelectStream(1);
        5:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        5:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        5:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       55:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
      550:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      500:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        5:   80:  if (numPlayers == 2)
        -:   81:    {
        5:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        5:   94:  if (numPlayers == 2)
        -:   95:    {
        5:   96:      state->supplyCount[estate] = 8;
        5:   97:      state->supplyCount[duchy] = 8;
        5:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        5:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  109:  state->supplyCount[silver] = 40;
        5:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      105:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
      825:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
      775:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       50:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
       18:  122:		  if (numPlayers == 2){ 
        9:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
       41:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       50:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      725:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       15:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
       10:  147:      state->deckCount[i] = 0;
       40:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
       30:  150:	  state->deck[i][j] = estate;
       30:  151:	  state->deckCount[i]++;
        -:  152:	}
       80:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
       70:  155:	  state->deck[i][j] = copper;
       70:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       15:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
       10:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
       15:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       10:  173:      state->handCount[i] = 0;
       10:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      140:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
      135:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        5:  189:  state->outpostPlayed = 0;
        5:  190:  state->phase = 0;
        5:  191:  state->numActions = 1;
        5:  192:  state->numBuys = 1;
        5:  193:  state->playedCardCount = 0;
        5:  194:  state->whoseTurn = 0;
        5:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       30:  199:  for (it = 0; it < 5; it++){
       25:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        5:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        5:  205:  return 0;
        -:  206:}
        -:  207:
       14:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       14:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       14:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       14:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      156:  221:  while (state->deckCount[player] > 0) {
      128:  222:    card = floor(Random() * state->deckCount[player]);
      128:  223:    newDeck[newDeckPos] = state->deck[player][card];
      128:  224:    newDeckPos++;
      344:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
      216:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
      128:  228:    state->deckCount[player]--;
        -:  229:  }
      142:  230:  for (i = 0; i < newDeckPos; i++) {
      128:  231:    state->deck[player][i] = newDeck[i];
      128:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
       14:  235:  return 0;
        -:  236:}
        -:  237:
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
       24:  353:int whoseTurn(struct gameState *state) {
       24:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
       16:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
       16:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
      112:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       96:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       96:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
       16:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
       16:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
        8:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
        8:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
       16:  377:  state->outpostPlayed = 0;
       16:  378:  state->phase = 0;
       16:  379:  state->numActions = 1;
       16:  380:  state->coins = 0;
       16:  381:  state->numBuys = 1;
       16:  382:  state->playedCardCount = 0;
       16:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       96:  387:  for (k = 0; k < 5; k++){
       80:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
       16:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
       16:  394:  return 0;
        -:  395:}
        -:  396:
        3:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
        3:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
        1:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
        2:  408:  j = 0;
       52:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
       50:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
        3:  413:	  j++;
        -:  414:	}
        -:  415:    }
        2:  416:  if ( j >= 3)
        -:  417:    {
        1:  418:      return 1;
        -:  419:    }
        -:  420:
        1:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
      130:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
      130:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
       32:  540:    for (i = 0; i < state->discardCount[player];i++){
       28:  541:      state->deck[player][i] = state->discard[player][i];
       28:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
        4:  545:    state->deckCount[player] = state->discardCount[player];
        4:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        4:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        4:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        4:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        4:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        4:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
        4:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  570:    state->deckCount[player]--;
        4:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
      126:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
      126:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
      126:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      126:  583:    state->deckCount[player]--;
      126:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
      130:  587:  return 0;
        -:  588:}
        -:  589:
       28:  590:int getCost(int cardNumber)
        -:  591:{
       28:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
        1:  595:      return 0;
        -:  596:    case estate:
        1:  597:      return 2;
        -:  598:    case duchy:
        1:  599:      return 5;
        -:  600:    case province:
        1:  601:      return 8;
        -:  602:    case copper:
        1:  603:      return 0;
        -:  604:    case silver:
        1:  605:      return 3;
        -:  606:    case gold:
        1:  607:      return 6;
        -:  608:    case adventurer:
        1:  609:      return 6;
        -:  610:    case council_room:
        1:  611:      return 5;
        -:  612:    case feast:
        1:  613:      return 4;
        -:  614:    case gardens:
        1:  615:      return 4;
        -:  616:    case mine:
        1:  617:      return 5;
        -:  618:    case remodel:
        1:  619:      return 4;
        -:  620:    case smithy:
        1:  621:      return 4;
        -:  622:    case village:
        1:  623:      return 3;
        -:  624:    case baron:
        1:  625:      return 4;
        -:  626:    case great_hall:
        1:  627:      return 3;
        -:  628:    case minion:
        1:  629:      return 5;
        -:  630:    case steward:
        1:  631:      return 3;
        -:  632:    case tribute:
        1:  633:      return 5;
        -:  634:    case ambassador:
        1:  635:      return 3;
        -:  636:    case cutpurse:
        1:  637:      return 4;
        -:  638:    case embargo: 
        1:  639:      return 2;
        -:  640:    case outpost:
        1:  641:      return 5;
        -:  642:    case salvager:
        1:  643:      return 4;
        -:  644:    case sea_hag:
        1:  645:      return 4;
        -:  646:    case treasure_map:
        1:  647:      return 4;
        -:  648:    }
        -:  649:	
        1:  650:  return -1;
        -:  651:}
        -:  652:
        8:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
        8:  660:  int currentPlayer = whoseTurn(state);
        8:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
        8:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
        8:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
        8:  667:  int z = 0;// this is the counter for the temp hand
        8:  668:  if (nextPlayer > (state->numPlayers - 1)){
        4:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
        8:  674:  switch( card ) 
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
        2:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
        2:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
       10:  684:      for (i = 0; i < 4; i++)
        -:  685:	{
        8:  686:	  drawCard(currentPlayer, state);
        -:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
        2:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
        6:  693:      for (i = 0; i < state->numPlayers; i++)
        -:  694:	{
        4:  695:	  if ( i != currentPlayer )
        -:  696:	    {
        2:  697:	      drawCard(i, state);
        -:  698:	    }
        -:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
        2:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
        2:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
    #####:  719:	if (supplyCount(choice1, state) <= 0){
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
        -:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
        -:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
        -:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
        -:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
        -:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
        2:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
        2:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
        2:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
        2:  835:      discardCard(handPos, currentPlayer, state, 0);
        2:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
    #####:  864:		isGameOver(state);
        -:  865:	      }
        -:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
        -:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
    #####:  881:	    isGameOver(state);
        -:  882:	  }
        -:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
        -:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
        -:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
        -:  941:			{
    #####:  942:			  drawCard(i, state);
        -:  943:			}
        -:  944:		    }
        -:  945:		}
        -:  946:	    }
        -:  947:				
        -:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
        -:  957:	}
    #####:  958:      else if (choice1 == 2)
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
        -:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
        -:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
        -:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
        -:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
        -: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1019:	  state->coins += 2;
        -: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
        -: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1049:	    {
    #####: 1050:	      j++;
        -: 1051:	    }
        -: 1052:	}
    #####: 1053:      if (j < choice2)
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1070:	    }
        -: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
        -: 1086:	    }
        -: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
        -: 1137:	}
    #####: 1138:      if (index > -1)
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
        -: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
        -: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
        2: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
        2: 1167:	int drawntreasure = 0;
        2: 1168:	int z =0; 
        -: 1169:	  
        9: 1170:	while(drawntreasure<2){
        5: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1172:			shuffle(currentPlayer, state);
        -: 1173:		}
        -: 1174:	
        5: 1175:		drawCard(currentPlayer, state);
        5: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        5: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        4: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
        1: 1181:			temphand[z]=cardDrawn;
        1: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
        5: 1187:	while(z-1>=0){
        1: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
        1: 1189:		z=z-1;
        -: 1190:    }
        2: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
        2: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
       10: 1198:    for (i = 0; i <= 3; i++){
        8: 1199:	  drawCard(currentPlayer, state);
        -: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
        2: 1203:    discardCard(handPos, currentPlayer, state, 0);
        2: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
    #####: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
        -: 1229:}
        -: 1230:
    #####: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
        -: 1256:		}
        -: 1257:					
        -: 1258:	    }
        -: 1259:				
        -: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
    #####: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
    #####: 1271:		if (i != currentPlayer){
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1277:		}
        -: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
        6: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
        6: 1291:  if (trashFlag < 1)
        -: 1292:    {
        -: 1293:      //add card to played pile
        6: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1295:      state->playedCardCount++;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
        6: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
        6: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        6: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
        6: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
        6: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
        6: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
        6: 1322:  return 0;
        -: 1323:}
        -: 1324:
    #####: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1330:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1331:    {
    #####: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
    #####: 1340:  if (toFlag == 1)
        -: 1341:    {
    #####: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:      state->deckCount[player]++;
        -: 1344:    }
    #####: 1345:  else if (toFlag == 2)
        -: 1346:    {
    #####: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:      state->handCount[player]++;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
    #####: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
    #####: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
    #####: 1359:  return 0;
        -: 1360:}
        -: 1361:
       23: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
       23: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
      138: 1370:  for (i = 0; i < state->handCount[player]; i++)
        -: 1371:    {
      115: 1372:      if (state->hand[player][i] == copper)
        -: 1373:	{
       74: 1374:	  state->coins += 1;
        -: 1375:	}
       41: 1376:      else if (state->hand[player][i] == silver)
        -: 1377:	{
        1: 1378:	  state->coins += 2;
        -: 1379:	}
       40: 1380:      else if (state->hand[player][i] == gold)
        -: 1381:	{
        1: 1382:	  state->coins += 3;
        -: 1383:	}	
        -: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
       23: 1387:  state->coins += bonus;
        -: 1388:
       23: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
        -: 1394:
Test suite for function scoreFor
Test Case 1: FAIL The score of expected player 1 is 27, but the actual score is 33.
 The score of expected player 2 is 25, but the actual score is 25
Test case 2: FAIL The score of expected player 1 is 37, but the actual score is 43.
 The score of expected player 2 is 25, but the actual score is 25
File 'unittest4.c'
Lines executed:97.76% of 134
Creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:50.71% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unitest4.c
        -:    2://Created by Shiyi Zhang for Assignment 3
        -:    3://It is to test the function scoreFor 
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include "rngs.h"
        -:    9:
        -:   10:struct scoreCardStr {
        -:   11:    int curse;
        -:   12:    int estate;
        -:   13:    int greatHall;
        -:   14:    int duchy;
        -:   15:    int province;
        -:   16:    int gardens;
        -:   17:};
        -:   18:
        1:   19:struct gameState testGame(int randomSeed) {
        -:   20:    struct gameState testState;
        1:   21:    int k[10] = {adventurer, council_room, gardens, mine, remodel, smithy, baron, great_hall, steward, tribute};
        -:   22:
        1:   23:    initializeGame(2, k, randomSeed, &testState);
        -:   24:
        1:   25:    int money = 0;
        1:   26:    int i = 0;
        1:   27:    int smithyFlag = -1;
        1:   28:    int adventurerFlag = -1;
        1:   29:    int smithyCount = 0;
        1:   30:    int adventurerCount = 0;
        -:   31:
       41:   32:    while (!isGameOver(&testState)){
       39:   33:	    money = 0;
       39:   34:	    smithyFlag = -1;
       39:   35:	    adventurerFlag = -1;
      234:   36:	    for (i = 0; i < numHandCards(&testState); i++) {
      195:   37:	      if (handCard(i, &testState) == copper)
       88:   38:		      money++;
      107:   39:	      else if (handCard(i, &testState) == silver)
       30:   40:		      money += 2;
       77:   41:	      else if (handCard(i, &testState) == gold)
       22:   42:		      money += 3;
       55:   43:	      else if (handCard(i, &testState) == smithy)
        2:   44:		      smithyFlag = i;
       53:   45:	      else if (handCard(i, &testState) == adventurer)
        4:   46:		      adventurerFlag = i;
        -:   47:	    }
        -:   48:
       39:   49:  	  if (whoseTurn(&testState) == 0) {
       20:   50:  	    if (smithyFlag != -1) {
        2:   51:  		    playCard(smithyFlag, -1, -1, -1, &testState);
        2:   52:  		    money = 0;
        2:   53:  		    i=0;
       20:   54:  		    while(i<numHandCards(&testState)){
       16:   55:  		      if (handCard(i, &testState) == copper){
       10:   56:  			      playCard(i, -1, -1, -1, &testState);
       10:   57:  			      money++;
        -:   58:  		      }
        6:   59:  		      else if (handCard(i, &testState) == silver){
        2:   60:  			      playCard(i, -1, -1, -1, &testState);
        2:   61:  			      money = money + 2;
        -:   62:  		      }
        4:   63:  		      else if (handCard(i, &testState) == gold){
        1:   64:  			      playCard(i, -1, -1, -1, &testState);
        1:   65:  			      money = money + 3;
        -:   66:  		      }
       16:   67:  		    i++;
        -:   68:  		  }
        -:   69:      }
       20:   70:  	    if (money >= 8) {
        4:   71:  		    buyCard(province, &testState);
        -:   72:  	    }
       16:   73:  	    else if (money >= 6) {
       10:   74:  		    buyCard(gold, &testState);
        -:   75:  	    }
        6:   76:  	    else if ((money >= 4) && (smithyCount < 2)) {
        2:   77:  		    buyCard(smithy, &testState);
        2:   78:  	    	smithyCount++;
        -:   79:  	    }
        4:   80:  	    else if (money >= 3) {
        3:   81:  		    buyCard(silver, &testState);
        -:   82:  	    }
       20:   83:  	    endTurn(&testState);
        -:   84:    }
        -:   85:	  else {
       19:   86:	    if (adventurerFlag != -1) {
        4:   87:		    playCard(adventurerFlag, -1, -1, -1, &testState);
        4:   88:		    money = 0;
        4:   89:		    i=0;
       36:   90:		    while(i<numHandCards(&testState)){
       28:   91:		      if (handCard(i, &testState) == copper){
       10:   92:			      playCard(i, -1, -1, -1, &testState);
       10:   93:			      money++;
        -:   94:		      }
       18:   95:		      else if (handCard(i, &testState) == silver){
        9:   96:            playCard(i, -1, -1, -1, &testState);
        9:   97:			      money = money + 2;
        -:   98:		      }
        9:   99:		      else if (handCard(i, &testState) == gold){
        1:  100:			      playCard(i, -1, -1, -1, &testState);
        1:  101:			      money = money + 3;
        -:  102:		      }
       28:  103:	      i++;
        -:  104:		    }
        -:  105:     }
       19:  106:     if (money >= 8) {
        4:  107:		    buyCard(province, &testState);
        -:  108:     }
       15:  109:     else if ((money >= 6) && (adventurerCount < 2)) {
        2:  110:		    buyCard(adventurer, &testState);
        2:  111:		    adventurerCount++;
        -:  112:     }
       13:  113:     else if (money >= 6){
        5:  114:		    buyCard(gold, &testState);
        -:  115:     }
        8:  116:     else if (money >= 3){
        8:  117:		    buyCard(silver, &testState);
        -:  118:     }
       19:  119:     endTurn(&testState);
        -:  120:    }
        -:  121:   }
        1:  122:    return testState;
        -:  123:}
        -:  124:
       12:  125:void cardCounts(int player, int cardNum, int cards[], struct scoreCardStr *deckPile) {
        -:  126:    int i;
      124:  127:    for (i = 0; i < cardNum; i++) {
      112:  128:	    switch (cards[i]) {
        -:  129:        case curse:
        2:  130:  		    deckPile->curse++;
        2:  131:  		  break;
        -:  132:  	    case estate:
       25:  133:  		    deckPile->estate++;
       25:  134:  		  break;
        -:  135:  	    case great_hall:
        4:  136:  		    deckPile->greatHall++;
        4:  137:  		  break;
        -:  138:  	    case duchy:
        5:  139:  	    	deckPile->duchy++;
        5:  140:  		  break;
        -:  141:  	    case province:
       12:  142:    		  deckPile->province++;
       12:  143:    		break;
        -:  144:  	    case gardens:
    #####:  145:  		    deckPile->gardens++;
    #####:  146:  		  break;
        -:  147:	}
        -:  148:    }
       12:  149:}
        -:  150:
        4:  151:int calScore(int player, struct gameState *gameState) {
        4:  152:    int score = 0;
        4:  153:    struct scoreCardStr deckPile = {0, 0, 0, 0, 0, 0};
        -:  154:
        4:  155:    cardCounts(player, gameState->handCount[player], gameState->hand[player], &deckPile);
        4:  156:    cardCounts(player, gameState->discardCount[player], gameState->discard[player], &deckPile);
        4:  157:    cardCounts(player, gameState->deckCount[player], gameState->deck[player], &deckPile);
        4:  158:    int scoreCards = deckPile.curse + deckPile.estate + deckPile.greatHall + deckPile.duchy + deckPile.province + deckPile.gardens;
        4:  159:    int gardenCounts = (int)floor((float)scoreCards / 10);
        -:  160:
        4:  161:    score = score - (deckPile.curse);
        4:  162:    score = score + (deckPile.estate);
        4:  163:    score = score + (deckPile.greatHall);
        4:  164:    score = score + (deckPile.duchy * 3);
        4:  165:    score = score + (deckPile.province * 6);
        4:  166:    score = score + (deckPile.gardens * gardenCounts);
        -:  167:    
        4:  168:    return score;
        -:  169:}
        -:  170:
        1:  171:int main (int argc, char** argv) {
        -:  172:    struct gameState testResult;
        -:  173:    int i;
        1:  174:    int randomSeed = 2;
        -:  175:    int expectedPlayer1, expectedPlayer2;
        -:  176:    int testPlayer1, testPlayer2; 
        -:  177:
        1:  178:    testResult = testGame(randomSeed);
        -:  179:
        1:  180:    printf("Test suite for function scoreFor\n");
        -:  181:
        1:  182:    printf("Test Case 1: ");
        1:  183:    expectedPlayer1 = calScore(0, &testResult);
        1:  184:    expectedPlayer2 = calScore(1, &testResult);
        1:  185:    testPlayer1 = scoreFor(0, &testResult);
        1:  186:    testPlayer2 = scoreFor(1, &testResult);
        1:  187:    printf("%s", (expectedPlayer1 == testPlayer1 && expectedPlayer2 == testPlayer2) ? "PASS" : "FAIL");
        1:  188:    printf(" The score of expected player 1 is %d, but the actual score is %d.\n The score of expected player 2 is %d, but the actual score is %d\n", expectedPlayer1, testPlayer1, expectedPlayer2, testPlayer2);
        -:  189:
        1:  190:    for (i = 0; i < testResult.handCount[0]; i++)
    #####:  191:	    testResult.hand[0][i] = province;
       19:  192:    for (i = 0; i < testResult.discardCount[0]; i++)
       18:  193:	    testResult.discard[0][i] = estate;
       10:  194:    for (i = 0; i < testResult.deckCount[0]; i++)
        9:  195:	    if (i % 2 == 0) 
        5:  196:        testResult.deck[0][i] = duchy;
        -:  197:    	else 
        4:  198:        testResult.deck[0][i] = great_hall;
        -:  199:
        1:  200:    printf("Test case 2: ");
        1:  201:    expectedPlayer1 = calScore(0, &testResult);
        1:  202:    expectedPlayer2 = calScore(1, &testResult);
        1:  203:    testPlayer1 = scoreFor(0, &testResult);
        1:  204:    testPlayer2 = scoreFor(1, &testResult);
        1:  205:    printf("%s", (expectedPlayer1 == testPlayer1 && expectedPlayer2 == testPlayer2) ? "PASS" : "FAIL");
        1:  206:    printf(" The score of expected player 1 is %d, but the actual score is %d.\n The score of expected player 2 is %d, but the actual score is %d\n",
        -:  207:	    expectedPlayer1, testPlayer1, expectedPlayer2, testPlayer2);
        -:  208:
        1:  209:    return 0;
        -:  210:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
      854:   15:int compare(const void* a, const void* b) {
      854:   16:  if (*(int*)a > *(int*)b)
      328:   17:    return 1;
      526:   18:  if (*(int*)a < *(int*)b)
      148:   19:    return -1;
      378:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        6:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        6:   51:  SelectStream(1);
        6:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        6:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        6:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       66:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
      660:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      600:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        6:   80:  if (numPlayers == 2)
        -:   81:    {
        6:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        6:   94:  if (numPlayers == 2)
        -:   95:    {
        6:   96:      state->supplyCount[estate] = 8;
        6:   97:      state->supplyCount[duchy] = 8;
        6:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        6:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  109:  state->supplyCount[silver] = 40;
        6:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      126:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
      990:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
      930:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       60:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
       22:  122:		  if (numPlayers == 2){ 
       11:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
       49:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       60:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      870:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       18:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
       12:  147:      state->deckCount[i] = 0;
       48:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
       36:  150:	  state->deck[i][j] = estate;
       36:  151:	  state->deckCount[i]++;
        -:  152:	}
       96:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
       84:  155:	  state->deck[i][j] = copper;
       84:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       18:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
       12:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
       18:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       12:  173:      state->handCount[i] = 0;
       12:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      168:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
      162:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        6:  189:  state->outpostPlayed = 0;
        6:  190:  state->phase = 0;
        6:  191:  state->numActions = 1;
        6:  192:  state->numBuys = 1;
        6:  193:  state->playedCardCount = 0;
        6:  194:  state->whoseTurn = 0;
        6:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       36:  199:  for (it = 0; it < 5; it++){
       30:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        6:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        6:  205:  return 0;
        -:  206:}
        -:  207:
       32:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       32:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       32:  216:  if (state->deckCount[player] < 1)
        1:  217:    return -1;
       31:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      429:  221:  while (state->deckCount[player] > 0) {
      367:  222:    card = floor(Random() * state->deckCount[player]);
      367:  223:    newDeck[newDeckPos] = state->deck[player][card];
      367:  224:    newDeckPos++;
     1535:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
     1168:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
      367:  228:    state->deckCount[player]--;
        -:  229:  }
      398:  230:  for (i = 0; i < newDeckPos; i++) {
      367:  231:    state->deck[player][i] = newDeck[i];
      367:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
       31:  235:  return 0;
        -:  236:}
        -:  237:
       39:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
       39:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
       39:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
       39:  250:  if ( state->numActions < 1 )
        -:  251:    {
       33:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
        6:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
        6:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
        6:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
        6:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
        6:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
        6:  276:  return 0;
        -:  277:}
        -:  278:
       38:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
       38:  287:  who = state->whoseTurn;
        -:  288:
       38:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
       38:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
       38:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
       38:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
       38:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
       38:  306:    state->coins = (state->coins) - (getCost(supplyPos));
       38:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
       38:  315:  return 0;
        -:  316:}
        -:  317:
      284:  318:int numHandCards(struct gameState *state) {
      284:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
      574:  322:int handCard(int handPos, struct gameState *state) {
      574:  323:  int currentPlayer = whoseTurn(state);
      574:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
       76:  327:int supplyCount(int card, struct gameState *state) {
       76:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
      966:  353:int whoseTurn(struct gameState *state) {
      966:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
       55:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
       55:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
      360:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      305:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      305:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
       55:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
       55:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
       28:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
       27:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
       55:  377:  state->outpostPlayed = 0;
       55:  378:  state->phase = 0;
       55:  379:  state->numActions = 1;
       55:  380:  state->coins = 0;
       55:  381:  state->numBuys = 1;
       55:  382:  state->playedCardCount = 0;
       55:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
      330:  387:  for (k = 0; k < 5; k++){
      275:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
       55:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
       55:  394:  return 0;
        -:  395:}
        -:  396:
       43:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
       43:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
        2:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
       41:  408:  j = 0;
     1066:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
     1025:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
        3:  413:	  j++;
        -:  414:	}
        -:  415:    }
       41:  416:  if ( j >= 3)
        -:  417:    {
        1:  418:      return 1;
        -:  419:    }
        -:  420:
       40:  421:  return 0;
        -:  422:}
        -:  423:
        4:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
        4:  427:  int score = 0;
        -:  428:  //score from hand
       14:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
       10:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
       10:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
       10:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
       10:  434:      if (state->hand[player][i] == province) { score = score + 6; };
       10:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       10:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
       64:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
       60:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
       60:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
       60:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
       60:  445:      if (state->discard[player][i] == province) { score = score + 6; };
       60:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       60:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
       64:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
       60:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
       60:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
       60:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
       60:  456:      if (state->deck[player][i] == province) { score = score + 6; };
       60:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       60:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
        4:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
      348:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
      348:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
      266:  540:    for (i = 0; i < state->discardCount[player];i++){
      247:  541:      state->deck[player][i] = state->discard[player][i];
      247:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
       19:  545:    state->deckCount[player] = state->discardCount[player];
       19:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
       19:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
       19:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
       19:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
       19:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
       19:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
       19:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       19:  570:    state->deckCount[player]--;
       19:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
      329:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
      329:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
      329:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      329:  583:    state->deckCount[player]--;
      329:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
      348:  587:  return 0;
        -:  588:}
        -:  589:
      104:  590:int getCost(int cardNumber)
        -:  591:{
      104:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
        1:  595:      return 0;
        -:  596:    case estate:
        1:  597:      return 2;
        -:  598:    case duchy:
        1:  599:      return 5;
        -:  600:    case province:
       17:  601:      return 8;
        -:  602:    case copper:
        1:  603:      return 0;
        -:  604:    case silver:
       23:  605:      return 3;
        -:  606:    case gold:
       31:  607:      return 6;
        -:  608:    case adventurer:
        5:  609:      return 6;
        -:  610:    case council_room:
        1:  611:      return 5;
        -:  612:    case feast:
        1:  613:      return 4;
        -:  614:    case gardens:
        1:  615:      return 4;
        -:  616:    case mine:
        1:  617:      return 5;
        -:  618:    case remodel:
        1:  619:      return 4;
        -:  620:    case smithy:
        5:  621:      return 4;
        -:  622:    case village:
        1:  623:      return 3;
        -:  624:    case baron:
        1:  625:      return 4;
        -:  626:    case great_hall:
        1:  627:      return 3;
        -:  628:    case minion:
        1:  629:      return 5;
        -:  630:    case steward:
        1:  631:      return 3;
        -:  632:    case tribute:
        1:  633:      return 5;
        -:  634:    case ambassador:
        1:  635:      return 3;
        -:  636:    case cutpurse:
        1:  637:      return 4;
        -:  638:    case embargo: 
        1:  639:      return 2;
        -:  640:    case outpost:
        1:  641:      return 5;
        -:  642:    case salvager:
        1:  643:      return 4;
        -:  644:    case sea_hag:
        1:  645:      return 4;
        -:  646:    case treasure_map:
        1:  647:      return 4;
        -:  648:    }
        -:  649:	
        1:  650:  return -1;
        -:  651:}
        -:  652:
       14:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
       14:  660:  int currentPlayer = whoseTurn(state);
       14:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
       14:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
       14:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
       14:  667:  int z = 0;// this is the counter for the temp hand
       14:  668:  if (nextPlayer > (state->numPlayers - 1)){
        8:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
       14:  674:  switch( card ) 
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
        6:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
        6:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
       10:  684:      for (i = 0; i < 4; i++)
        -:  685:	{
        8:  686:	  drawCard(currentPlayer, state);
        -:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
        2:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
        6:  693:      for (i = 0; i < state->numPlayers; i++)
        -:  694:	{
        4:  695:	  if ( i != currentPlayer )
        -:  696:	    {
        2:  697:	      drawCard(i, state);
        -:  698:	    }
        -:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
        2:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
        2:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
    #####:  719:	if (supplyCount(choice1, state) <= 0){
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
        -:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
        -:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
        -:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
        -:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
        -:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
        4:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
        2:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
        2:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
        2:  835:      discardCard(handPos, currentPlayer, state, 0);
        2:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
    #####:  864:		isGameOver(state);
        -:  865:	      }
        -:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
        -:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
    #####:  881:	    isGameOver(state);
        -:  882:	  }
        -:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
        -:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
        -:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
        -:  941:			{
    #####:  942:			  drawCard(i, state);
        -:  943:			}
        -:  944:		    }
        -:  945:		}
        -:  946:	    }
        -:  947:				
        -:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
        -:  957:	}
    #####:  958:      else if (choice1 == 2)
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
        -:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
        -:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
        -:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
        -:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
        -: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1019:	  state->coins += 2;
        -: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
        -: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1049:	    {
    #####: 1050:	      j++;
        -: 1051:	    }
        -: 1052:	}
    #####: 1053:      if (j < choice2)
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1070:	    }
        -: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
        -: 1086:	    }
        -: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
        -: 1137:	}
    #####: 1138:      if (index > -1)
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
        -: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
        -: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
        6: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
        6: 1167:	int drawntreasure = 0;
        6: 1168:	int z =0; 
        -: 1169:	  
       27: 1170:	while(drawntreasure<2){
       15: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
        1: 1172:			shuffle(currentPlayer, state);
        -: 1173:		}
        -: 1174:	
       15: 1175:		drawCard(currentPlayer, state);
       15: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       15: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       12: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
        3: 1181:			temphand[z]=cardDrawn;
        3: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
       15: 1187:	while(z-1>=0){
        3: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
        3: 1189:		z=z-1;
        -: 1190:    }
        6: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
        4: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
       20: 1198:    for (i = 0; i <= 3; i++){
       16: 1199:	  drawCard(currentPlayer, state);
        -: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
        4: 1203:    discardCard(handPos, currentPlayer, state, 0);
        4: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
    #####: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
        -: 1229:}
        -: 1230:
    #####: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
        -: 1256:		}
        -: 1257:					
        -: 1258:	    }
        -: 1259:				
        -: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
    #####: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
    #####: 1271:		if (i != currentPlayer){
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1277:		}
        -: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
        8: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
        8: 1291:  if (trashFlag < 1)
        -: 1292:    {
        -: 1293:      //add card to played pile
        8: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1295:      state->playedCardCount++;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
        8: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
        8: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        8: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
        8: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
        8: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
        8: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
        8: 1322:  return 0;
        -: 1323:}
        -: 1324:
       38: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
       38: 1330:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1331:    {
    #####: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
       38: 1340:  if (toFlag == 1)
        -: 1341:    {
    #####: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:      state->deckCount[player]++;
        -: 1344:    }
       38: 1345:  else if (toFlag == 2)
        -: 1346:    {
    #####: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:      state->handCount[player]++;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
       38: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       38: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
       38: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
       38: 1359:  return 0;
        -: 1360:}
        -: 1361:
       69: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
       69: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
      428: 1370:  for (i = 0; i < state->handCount[player]; i++)
        -: 1371:    {
      359: 1372:      if (state->hand[player][i] == copper)
        -: 1373:	{
      184: 1374:	  state->coins += 1;
        -: 1375:	}
      175: 1376:      else if (state->hand[player][i] == silver)
        -: 1377:	{
       44: 1378:	  state->coins += 2;
        -: 1379:	}
      131: 1380:      else if (state->hand[player][i] == gold)
        -: 1381:	{
       25: 1382:	  state->coins += 3;
        -: 1383:	}	
        -: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
       69: 1387:  state->coins += bonus;
        -: 1388:
       69: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
        -: 1394:
