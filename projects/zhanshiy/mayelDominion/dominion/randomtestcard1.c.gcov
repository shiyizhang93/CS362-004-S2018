        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://randomtestcard1.c
        -:    2://Created by Shiyi Zhang
        -:    3://This program is to random test card smithy
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:#include <stdlib.h>
        -:   12:#include <math.h>
        -:   13:#include <time.h>
        -:   14:
function main called 1 returned 100% blocks executed 90%
        1:   15:int main() {
        -:   16:    //assign variables value
        1:   17:    int flag = 1;
        1:   18:    char testCard[] = "smithy";
        -:   19:    struct gameState testState, tempTestState;
        1:   20:    int a = 1000;
        -:   21:    int i, j, k;
        -:   22:    int returnVal;
        1:   23:    int handPos = 0;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int bonus = 0;
        -:   28:    int currentPlayer;
        1:   29:    int addingCard = 3;
        1:   30:    int discardCount =1;
        -:   31:    int totalCards, tempTotalCards;
        -:   32:
        1:   33:    srand(time(NULL));
call    0 returned 1
call    1 returned 1
        1:   34:    printf ("*************RANDOM TESTS FOR CARD %s**************\n", testCard);
call    0 returned 1
        -:   35:
        -:   36:    //get the random numbers for the testState struct
     1001:   37:    for (i = 0; i < a; i++){
branch  0 taken 1000
branch  1 taken 1 (fallthrough)
  6576000:   38:        for (j = 0; j < sizeof(struct gameState)/ sizeof(int); j++) {
branch  0 taken 6575000
branch  1 taken 1000 (fallthrough)
  6575000:   39:            ((int*)&testState)[j] = rand() % 128;
call    0 returned 6575000
        -:   40:        }
     1000:   41:        testState.numPlayers = (rand() % 3)+2;
call    0 returned 1000
     1000:   42:        testState.whoseTurn = rand() % testState.numPlayers;
call    0 returned 1000
     1000:   43:        currentPlayer = whoseTurn(&testState);
call    0 returned 1000
     1000:   44:        testState.handCount[currentPlayer] = (rand() % (MAX_HAND/2))+1;
call    0 returned 1000
     1000:   45:        testState.deckCount[currentPlayer] = (rand() % (MAX_DECK/2))+1;
call    0 returned 1000
     1000:   46:        testState.discardCount[currentPlayer] = (rand() % (MAX_DECK/2))+1;
call    0 returned 1000
     1000:   47:        handPos = (rand() % testState.handCount[currentPlayer]);
call    0 returned 1000
        -:   48:        //copy testState struct to tempTestState for testing
     1000:   49:        memcpy(&tempTestState, &testState, sizeof(struct gameState));
        -:   50:        //test return value
     1000:   51:        returnVal = cardEffect(smithy, choice1, choice2, choice3, &tempTestState, handPos, &bonus);
call    0 returned 1000
     1000:   52:        if (returnVal != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1000
    #####:   53:            printf("Failed on return value.");
call    0 never executed
    #####:   54:            flag = 0;
        -:   55:        };
        -:   56:
        -:   57:        //test hand count value
     1000:   58:        if (tempTestState.handCount[currentPlayer] != testState.handCount[currentPlayer]-discardCount){
branch  0 taken 1000 (fallthrough)
branch  1 taken 0
     1000:   59:            flag = 0;
     1000:   60:            printf("Hand count is %d, and the expected value is %d.\n", tempTestState.handCount[currentPlayer], testState.handCount[currentPlayer]-discardCount);
call    0 returned 1000
        -:   61:        }
        -:   62:
        -:   63:        //test deck and discard count value
     1000:   64:        totalCards = testState.deckCount[currentPlayer] + testState.discardCount[currentPlayer];
     1000:   65:        tempTotalCards = tempTestState.deckCount[currentPlayer] + tempTestState.discardCount[currentPlayer];
     1000:   66:        if (tempTotalCards != totalCards - addingCard) {
branch  0 taken 1000 (fallthrough)
branch  1 taken 0
     1000:   67:            flag = 0;
     1000:   68:            printf("Total Cards are %d, and the expected value is %d.\n", tempTotalCards, totalCards-addingCard);
call    0 returned 1000
        -:   69:        };
        -:   70:  }
        -:   71:    //Final bool check to see whether testing passed or not
        1:   72:    if (flag) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   73:        printf("***********TEST SUCCEED************\n");
call    0 never executed
        -:   74:    } 
        -:   75:    else{
        1:   76:        printf("***********TEST FAILED***********\n");
call    0 returned 1
        -:   77:    }
        -:   78:
        1:   79:    return 0;
        -:   80:}
